# Makefile.in generated by automake 1.9.5 from Makefile.am.
# tests/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


SOURCES = $(libfrtests_a_SOURCES) $(EXTRA_libfrtests_a_SOURCES) mpf_compat.c mpfr_compat.c reuse.c tabs.c tacos.c tacosh.c tadd.c tadd1sp.c tadd_ui.c tagm.c tasin.c tasinh.c tatan.c tatanh.c tcan_round.c tcbrt.c tcheck.c tcmp.c tcmp2.c tcmp_d.c tcmp_ld.c tcmp_ui.c tcmpabs.c tcomparisons.c tconst_euler.c tconst_log2.c tconst_pi.c tcopysign.c tcos.c tcosh.c tdim.c tdiv.c tdiv_ui.c teq.c terf.c texceptions.c texp.c texp2.c texpm1.c tfactorial.c tfits.c tfma.c tfrac.c tgamma.c tget_d.c tget_d_2exp.c tget_sj.c tget_str.c tget_z.c tgmpop.c thyperbolic.c thypot.c tinits.c tinp_str.c tisnan.c tlog.c tlog10.c tlog1p.c tlog2.c tminmax.c tmul.c tmul_2exp.c tmul_ui.c tnext.c tout_str.c toutimpl.c tpow.c tpow3.c trandom.c trint.c tround_prec.c tset.c tset_d.c tset_exp.c tset_f.c tset_ld.c tset_q.c tset_si.c tset_sj.c tset_str.c tset_z.c tsgn.c tsi_op.c tsin.c tsin_cos.c tsinh.c tsqr.c tsqrt.c tsqrt_ui.c tstrtofr.c tsub.c tsub1sp.c tsub_ui.c tsum.c tswap.c ttan.c ttanh.c ttrunc.c tui_div.c tui_pow.c tui_sub.c tversion.c tzeta.c

srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/mpfr
pkglibdir = $(libdir)/mpfr
pkgincludedir = $(includedir)/mpfr
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = bfin-unknown-linux-gnu
check_PROGRAMS = tversion$(EXEEXT) tinits$(EXEEXT) tsgn$(EXEEXT) \
	tcheck$(EXEEXT) tisnan$(EXEEXT) texceptions$(EXEEXT) \
	tset_exp$(EXEEXT) tset$(EXEEXT) tabs$(EXEEXT) tset_d$(EXEEXT) \
	tset_f$(EXEEXT) tset_q$(EXEEXT) tset_si$(EXEEXT) \
	tset_str$(EXEEXT) tset_z$(EXEEXT) tset_ld$(EXEEXT) \
	tset_sj$(EXEEXT) tswap$(EXEEXT) tcopysign$(EXEEXT) \
	tcmp$(EXEEXT) tcmp2$(EXEEXT) tcmpabs$(EXEEXT) tcmp_d$(EXEEXT) \
	tcmp_ld$(EXEEXT) tcomparisons$(EXEEXT) teq$(EXEEXT) \
	tadd$(EXEEXT) tsub$(EXEEXT) tmul$(EXEEXT) tdiv$(EXEEXT) \
	tsub1sp$(EXEEXT) tadd1sp$(EXEEXT) tadd_ui$(EXEEXT) \
	tsub_ui$(EXEEXT) tcmp_ui$(EXEEXT) tdiv_ui$(EXEEXT) \
	tmul_ui$(EXEEXT) tsqrt_ui$(EXEEXT) tui_div$(EXEEXT) \
	tui_sub$(EXEEXT) tgmpop$(EXEEXT) tsi_op$(EXEEXT) \
	tmul_2exp$(EXEEXT) tfma$(EXEEXT) tsum$(EXEEXT) tdim$(EXEEXT) \
	tminmax$(EXEEXT) tnext$(EXEEXT) tfits$(EXEEXT) tget_d$(EXEEXT) \
	tget_d_2exp$(EXEEXT) tget_z$(EXEEXT) tget_str$(EXEEXT) \
	tget_sj$(EXEEXT) tout_str$(EXEEXT) tinp_str$(EXEEXT) \
	toutimpl$(EXEEXT) tcan_round$(EXEEXT) tround_prec$(EXEEXT) \
	tsqrt$(EXEEXT) tconst_log2$(EXEEXT) tconst_pi$(EXEEXT) \
	tconst_euler$(EXEEXT) trandom$(EXEEXT) ttrunc$(EXEEXT) \
	trint$(EXEEXT) tfrac$(EXEEXT) texp$(EXEEXT) texp2$(EXEEXT) \
	texpm1$(EXEEXT) tlog$(EXEEXT) tlog2$(EXEEXT) tlog10$(EXEEXT) \
	tlog1p$(EXEEXT) tpow$(EXEEXT) tui_pow$(EXEEXT) tpow3$(EXEEXT) \
	tcosh$(EXEEXT) tsinh$(EXEEXT) ttanh$(EXEEXT) tacosh$(EXEEXT) \
	tasinh$(EXEEXT) tatanh$(EXEEXT) thyperbolic$(EXEEXT) \
	tasin$(EXEEXT) tacos$(EXEEXT) tcos$(EXEEXT) tatan$(EXEEXT) \
	tsin$(EXEEXT) ttan$(EXEEXT) tsin_cos$(EXEEXT) tagm$(EXEEXT) \
	thypot$(EXEEXT) tfactorial$(EXEEXT) tgamma$(EXEEXT) \
	terf$(EXEEXT) tcbrt$(EXEEXT) tzeta$(EXEEXT) \
	mpf_compat$(EXEEXT) mpfr_compat$(EXEEXT) reuse$(EXEEXT) \
	tsqr$(EXEEXT) tstrtofr$(EXEEXT)
subdir = tests
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_CLEAN_FILES =
AR = ar
ARFLAGS = cru
libfrtests_a_AR = $(AR) $(ARFLAGS)
am__DEPENDENCIES_1 =
am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)
am_libfrtests_a_OBJECTS = memory.$(OBJEXT) rnd_mode.$(OBJEXT) \
	tests.$(OBJEXT) cmp_str.$(OBJEXT)
libfrtests_a_OBJECTS = $(am_libfrtests_a_OBJECTS)
mpf_compat_SOURCES = mpf_compat.c
mpf_compat_OBJECTS = mpf_compat.$(OBJEXT)
mpf_compat_LDADD = $(LDADD)
mpf_compat_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
mpfr_compat_SOURCES = mpfr_compat.c
mpfr_compat_OBJECTS = mpfr_compat.$(OBJEXT)
mpfr_compat_LDADD = $(LDADD)
mpfr_compat_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
reuse_SOURCES = reuse.c
reuse_OBJECTS = reuse.$(OBJEXT)
reuse_LDADD = $(LDADD)
reuse_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tabs_SOURCES = tabs.c
tabs_OBJECTS = tabs.$(OBJEXT)
tabs_LDADD = $(LDADD)
tabs_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tacos_SOURCES = tacos.c
tacos_OBJECTS = tacos.$(OBJEXT)
tacos_LDADD = $(LDADD)
tacos_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tacosh_SOURCES = tacosh.c
tacosh_OBJECTS = tacosh.$(OBJEXT)
tacosh_LDADD = $(LDADD)
tacosh_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tadd_SOURCES = tadd.c
tadd_OBJECTS = tadd.$(OBJEXT)
tadd_LDADD = $(LDADD)
tadd_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tadd1sp_SOURCES = tadd1sp.c
tadd1sp_OBJECTS = tadd1sp.$(OBJEXT)
tadd1sp_LDADD = $(LDADD)
tadd1sp_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tadd_ui_SOURCES = tadd_ui.c
tadd_ui_OBJECTS = tadd_ui.$(OBJEXT)
tadd_ui_LDADD = $(LDADD)
tadd_ui_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tagm_SOURCES = tagm.c
tagm_OBJECTS = tagm.$(OBJEXT)
tagm_LDADD = $(LDADD)
tagm_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tasin_SOURCES = tasin.c
tasin_OBJECTS = tasin.$(OBJEXT)
tasin_LDADD = $(LDADD)
tasin_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tasinh_SOURCES = tasinh.c
tasinh_OBJECTS = tasinh.$(OBJEXT)
tasinh_LDADD = $(LDADD)
tasinh_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tatan_SOURCES = tatan.c
tatan_OBJECTS = tatan.$(OBJEXT)
tatan_LDADD = $(LDADD)
tatan_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tatanh_SOURCES = tatanh.c
tatanh_OBJECTS = tatanh.$(OBJEXT)
tatanh_LDADD = $(LDADD)
tatanh_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcan_round_SOURCES = tcan_round.c
tcan_round_OBJECTS = tcan_round.$(OBJEXT)
tcan_round_LDADD = $(LDADD)
tcan_round_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcbrt_SOURCES = tcbrt.c
tcbrt_OBJECTS = tcbrt.$(OBJEXT)
tcbrt_LDADD = $(LDADD)
tcbrt_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcheck_SOURCES = tcheck.c
tcheck_OBJECTS = tcheck.$(OBJEXT)
tcheck_LDADD = $(LDADD)
tcheck_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcmp_SOURCES = tcmp.c
tcmp_OBJECTS = tcmp.$(OBJEXT)
tcmp_LDADD = $(LDADD)
tcmp_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcmp2_SOURCES = tcmp2.c
tcmp2_OBJECTS = tcmp2.$(OBJEXT)
tcmp2_LDADD = $(LDADD)
tcmp2_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcmp_d_SOURCES = tcmp_d.c
tcmp_d_OBJECTS = tcmp_d.$(OBJEXT)
tcmp_d_LDADD = $(LDADD)
tcmp_d_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcmp_ld_SOURCES = tcmp_ld.c
tcmp_ld_OBJECTS = tcmp_ld.$(OBJEXT)
tcmp_ld_LDADD = $(LDADD)
tcmp_ld_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcmp_ui_SOURCES = tcmp_ui.c
tcmp_ui_OBJECTS = tcmp_ui.$(OBJEXT)
tcmp_ui_LDADD = $(LDADD)
tcmp_ui_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcmpabs_SOURCES = tcmpabs.c
tcmpabs_OBJECTS = tcmpabs.$(OBJEXT)
tcmpabs_LDADD = $(LDADD)
tcmpabs_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcomparisons_SOURCES = tcomparisons.c
tcomparisons_OBJECTS = tcomparisons.$(OBJEXT)
tcomparisons_LDADD = $(LDADD)
tcomparisons_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tconst_euler_SOURCES = tconst_euler.c
tconst_euler_OBJECTS = tconst_euler.$(OBJEXT)
tconst_euler_LDADD = $(LDADD)
tconst_euler_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tconst_log2_SOURCES = tconst_log2.c
tconst_log2_OBJECTS = tconst_log2.$(OBJEXT)
tconst_log2_LDADD = $(LDADD)
tconst_log2_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tconst_pi_SOURCES = tconst_pi.c
tconst_pi_OBJECTS = tconst_pi.$(OBJEXT)
tconst_pi_LDADD = $(LDADD)
tconst_pi_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcopysign_SOURCES = tcopysign.c
tcopysign_OBJECTS = tcopysign.$(OBJEXT)
tcopysign_LDADD = $(LDADD)
tcopysign_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcos_SOURCES = tcos.c
tcos_OBJECTS = tcos.$(OBJEXT)
tcos_LDADD = $(LDADD)
tcos_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tcosh_SOURCES = tcosh.c
tcosh_OBJECTS = tcosh.$(OBJEXT)
tcosh_LDADD = $(LDADD)
tcosh_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tdim_SOURCES = tdim.c
tdim_OBJECTS = tdim.$(OBJEXT)
tdim_LDADD = $(LDADD)
tdim_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tdiv_SOURCES = tdiv.c
tdiv_OBJECTS = tdiv.$(OBJEXT)
tdiv_LDADD = $(LDADD)
tdiv_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tdiv_ui_SOURCES = tdiv_ui.c
tdiv_ui_OBJECTS = tdiv_ui.$(OBJEXT)
tdiv_ui_LDADD = $(LDADD)
tdiv_ui_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
teq_SOURCES = teq.c
teq_OBJECTS = teq.$(OBJEXT)
teq_LDADD = $(LDADD)
teq_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
terf_SOURCES = terf.c
terf_OBJECTS = terf.$(OBJEXT)
terf_LDADD = $(LDADD)
terf_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
texceptions_SOURCES = texceptions.c
texceptions_OBJECTS = texceptions.$(OBJEXT)
texceptions_LDADD = $(LDADD)
texceptions_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
texp_SOURCES = texp.c
texp_OBJECTS = texp.$(OBJEXT)
texp_LDADD = $(LDADD)
texp_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
texp2_SOURCES = texp2.c
texp2_OBJECTS = texp2.$(OBJEXT)
texp2_LDADD = $(LDADD)
texp2_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
texpm1_SOURCES = texpm1.c
texpm1_OBJECTS = texpm1.$(OBJEXT)
texpm1_LDADD = $(LDADD)
texpm1_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tfactorial_SOURCES = tfactorial.c
tfactorial_OBJECTS = tfactorial.$(OBJEXT)
tfactorial_LDADD = $(LDADD)
tfactorial_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tfits_SOURCES = tfits.c
tfits_OBJECTS = tfits.$(OBJEXT)
tfits_LDADD = $(LDADD)
tfits_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tfma_SOURCES = tfma.c
tfma_OBJECTS = tfma.$(OBJEXT)
tfma_LDADD = $(LDADD)
tfma_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tfrac_SOURCES = tfrac.c
tfrac_OBJECTS = tfrac.$(OBJEXT)
tfrac_LDADD = $(LDADD)
tfrac_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tgamma_SOURCES = tgamma.c
tgamma_OBJECTS = tgamma.$(OBJEXT)
tgamma_LDADD = $(LDADD)
tgamma_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tget_d_SOURCES = tget_d.c
tget_d_OBJECTS = tget_d.$(OBJEXT)
tget_d_LDADD = $(LDADD)
tget_d_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tget_d_2exp_SOURCES = tget_d_2exp.c
tget_d_2exp_OBJECTS = tget_d_2exp.$(OBJEXT)
tget_d_2exp_LDADD = $(LDADD)
tget_d_2exp_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tget_sj_SOURCES = tget_sj.c
tget_sj_OBJECTS = tget_sj.$(OBJEXT)
tget_sj_LDADD = $(LDADD)
tget_sj_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tget_str_SOURCES = tget_str.c
tget_str_OBJECTS = tget_str.$(OBJEXT)
tget_str_LDADD = $(LDADD)
tget_str_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tget_z_SOURCES = tget_z.c
tget_z_OBJECTS = tget_z.$(OBJEXT)
tget_z_LDADD = $(LDADD)
tget_z_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tgmpop_SOURCES = tgmpop.c
tgmpop_OBJECTS = tgmpop.$(OBJEXT)
tgmpop_LDADD = $(LDADD)
tgmpop_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
thyperbolic_SOURCES = thyperbolic.c
thyperbolic_OBJECTS = thyperbolic.$(OBJEXT)
thyperbolic_LDADD = $(LDADD)
thyperbolic_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
thypot_SOURCES = thypot.c
thypot_OBJECTS = thypot.$(OBJEXT)
thypot_LDADD = $(LDADD)
thypot_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tinits_SOURCES = tinits.c
tinits_OBJECTS = tinits.$(OBJEXT)
tinits_LDADD = $(LDADD)
tinits_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tinp_str_SOURCES = tinp_str.c
tinp_str_OBJECTS = tinp_str.$(OBJEXT)
tinp_str_LDADD = $(LDADD)
tinp_str_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tisnan_SOURCES = tisnan.c
tisnan_OBJECTS = tisnan.$(OBJEXT)
tisnan_LDADD = $(LDADD)
tisnan_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tlog_SOURCES = tlog.c
tlog_OBJECTS = tlog.$(OBJEXT)
tlog_LDADD = $(LDADD)
tlog_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tlog10_SOURCES = tlog10.c
tlog10_OBJECTS = tlog10.$(OBJEXT)
tlog10_LDADD = $(LDADD)
tlog10_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tlog1p_SOURCES = tlog1p.c
tlog1p_OBJECTS = tlog1p.$(OBJEXT)
tlog1p_LDADD = $(LDADD)
tlog1p_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tlog2_SOURCES = tlog2.c
tlog2_OBJECTS = tlog2.$(OBJEXT)
tlog2_LDADD = $(LDADD)
tlog2_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tminmax_SOURCES = tminmax.c
tminmax_OBJECTS = tminmax.$(OBJEXT)
tminmax_LDADD = $(LDADD)
tminmax_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tmul_SOURCES = tmul.c
tmul_OBJECTS = tmul.$(OBJEXT)
tmul_LDADD = $(LDADD)
tmul_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tmul_2exp_SOURCES = tmul_2exp.c
tmul_2exp_OBJECTS = tmul_2exp.$(OBJEXT)
tmul_2exp_LDADD = $(LDADD)
tmul_2exp_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tmul_ui_SOURCES = tmul_ui.c
tmul_ui_OBJECTS = tmul_ui.$(OBJEXT)
tmul_ui_LDADD = $(LDADD)
tmul_ui_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tnext_SOURCES = tnext.c
tnext_OBJECTS = tnext.$(OBJEXT)
tnext_LDADD = $(LDADD)
tnext_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tout_str_SOURCES = tout_str.c
tout_str_OBJECTS = tout_str.$(OBJEXT)
tout_str_LDADD = $(LDADD)
tout_str_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
toutimpl_SOURCES = toutimpl.c
toutimpl_OBJECTS = toutimpl.$(OBJEXT)
toutimpl_LDADD = $(LDADD)
toutimpl_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tpow_SOURCES = tpow.c
tpow_OBJECTS = tpow.$(OBJEXT)
tpow_LDADD = $(LDADD)
tpow_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tpow3_SOURCES = tpow3.c
tpow3_OBJECTS = tpow3.$(OBJEXT)
tpow3_LDADD = $(LDADD)
tpow3_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
trandom_SOURCES = trandom.c
trandom_OBJECTS = trandom.$(OBJEXT)
trandom_LDADD = $(LDADD)
trandom_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
trint_SOURCES = trint.c
trint_OBJECTS = trint.$(OBJEXT)
trint_LDADD = $(LDADD)
trint_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tround_prec_SOURCES = tround_prec.c
tround_prec_OBJECTS = tround_prec.$(OBJEXT)
tround_prec_LDADD = $(LDADD)
tround_prec_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tset_SOURCES = tset.c
tset_OBJECTS = tset.$(OBJEXT)
tset_LDADD = $(LDADD)
tset_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tset_d_SOURCES = tset_d.c
tset_d_OBJECTS = tset_d.$(OBJEXT)
tset_d_LDADD = $(LDADD)
tset_d_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tset_exp_SOURCES = tset_exp.c
tset_exp_OBJECTS = tset_exp.$(OBJEXT)
tset_exp_LDADD = $(LDADD)
tset_exp_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tset_f_SOURCES = tset_f.c
tset_f_OBJECTS = tset_f.$(OBJEXT)
tset_f_LDADD = $(LDADD)
tset_f_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tset_ld_SOURCES = tset_ld.c
tset_ld_OBJECTS = tset_ld.$(OBJEXT)
tset_ld_LDADD = $(LDADD)
tset_ld_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tset_q_SOURCES = tset_q.c
tset_q_OBJECTS = tset_q.$(OBJEXT)
tset_q_LDADD = $(LDADD)
tset_q_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tset_si_SOURCES = tset_si.c
tset_si_OBJECTS = tset_si.$(OBJEXT)
tset_si_LDADD = $(LDADD)
tset_si_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tset_sj_SOURCES = tset_sj.c
tset_sj_OBJECTS = tset_sj.$(OBJEXT)
tset_sj_LDADD = $(LDADD)
tset_sj_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tset_str_SOURCES = tset_str.c
tset_str_OBJECTS = tset_str.$(OBJEXT)
tset_str_LDADD = $(LDADD)
tset_str_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tset_z_SOURCES = tset_z.c
tset_z_OBJECTS = tset_z.$(OBJEXT)
tset_z_LDADD = $(LDADD)
tset_z_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsgn_SOURCES = tsgn.c
tsgn_OBJECTS = tsgn.$(OBJEXT)
tsgn_LDADD = $(LDADD)
tsgn_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsi_op_SOURCES = tsi_op.c
tsi_op_OBJECTS = tsi_op.$(OBJEXT)
tsi_op_LDADD = $(LDADD)
tsi_op_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsin_SOURCES = tsin.c
tsin_OBJECTS = tsin.$(OBJEXT)
tsin_LDADD = $(LDADD)
tsin_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsin_cos_SOURCES = tsin_cos.c
tsin_cos_OBJECTS = tsin_cos.$(OBJEXT)
tsin_cos_LDADD = $(LDADD)
tsin_cos_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsinh_SOURCES = tsinh.c
tsinh_OBJECTS = tsinh.$(OBJEXT)
tsinh_LDADD = $(LDADD)
tsinh_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsqr_SOURCES = tsqr.c
tsqr_OBJECTS = tsqr.$(OBJEXT)
tsqr_LDADD = $(LDADD)
tsqr_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsqrt_SOURCES = tsqrt.c
tsqrt_OBJECTS = tsqrt.$(OBJEXT)
tsqrt_LDADD = $(LDADD)
tsqrt_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsqrt_ui_SOURCES = tsqrt_ui.c
tsqrt_ui_OBJECTS = tsqrt_ui.$(OBJEXT)
tsqrt_ui_LDADD = $(LDADD)
tsqrt_ui_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tstrtofr_SOURCES = tstrtofr.c
tstrtofr_OBJECTS = tstrtofr.$(OBJEXT)
tstrtofr_LDADD = $(LDADD)
tstrtofr_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsub_SOURCES = tsub.c
tsub_OBJECTS = tsub.$(OBJEXT)
tsub_LDADD = $(LDADD)
tsub_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsub1sp_SOURCES = tsub1sp.c
tsub1sp_OBJECTS = tsub1sp.$(OBJEXT)
tsub1sp_LDADD = $(LDADD)
tsub1sp_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsub_ui_SOURCES = tsub_ui.c
tsub_ui_OBJECTS = tsub_ui.$(OBJEXT)
tsub_ui_LDADD = $(LDADD)
tsub_ui_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tsum_SOURCES = tsum.c
tsum_OBJECTS = tsum.$(OBJEXT)
tsum_LDADD = $(LDADD)
tsum_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tswap_SOURCES = tswap.c
tswap_OBJECTS = tswap.$(OBJEXT)
tswap_LDADD = $(LDADD)
tswap_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
ttan_SOURCES = ttan.c
ttan_OBJECTS = ttan.$(OBJEXT)
ttan_LDADD = $(LDADD)
ttan_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
ttanh_SOURCES = ttanh.c
ttanh_OBJECTS = ttanh.$(OBJEXT)
ttanh_LDADD = $(LDADD)
ttanh_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
ttrunc_SOURCES = ttrunc.c
ttrunc_OBJECTS = ttrunc.$(OBJEXT)
ttrunc_LDADD = $(LDADD)
ttrunc_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tui_div_SOURCES = tui_div.c
tui_div_OBJECTS = tui_div.$(OBJEXT)
tui_div_LDADD = $(LDADD)
tui_div_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tui_pow_SOURCES = tui_pow.c
tui_pow_OBJECTS = tui_pow.$(OBJEXT)
tui_pow_LDADD = $(LDADD)
tui_pow_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tui_sub_SOURCES = tui_sub.c
tui_sub_OBJECTS = tui_sub.$(OBJEXT)
tui_sub_LDADD = $(LDADD)
tui_sub_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tversion_SOURCES = tversion.c
tversion_OBJECTS = tversion.$(OBJEXT)
tversion_LDADD = $(LDADD)
tversion_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
tzeta_SOURCES = tzeta.c
tzeta_OBJECTS = tzeta.$(OBJEXT)
tzeta_LDADD = $(LDADD)
tzeta_DEPENDENCIES = libfrtests.a $(am__DEPENDENCIES_1) \
	$(top_builddir)/libmpfr.a
DEFAULT_INCLUDES = -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libfrtests_a_SOURCES) $(EXTRA_libfrtests_a_SOURCES) \
	mpf_compat.c mpfr_compat.c reuse.c tabs.c tacos.c tacosh.c \
	tadd.c tadd1sp.c tadd_ui.c tagm.c tasin.c tasinh.c tatan.c \
	tatanh.c tcan_round.c tcbrt.c tcheck.c tcmp.c tcmp2.c tcmp_d.c \
	tcmp_ld.c tcmp_ui.c tcmpabs.c tcomparisons.c tconst_euler.c \
	tconst_log2.c tconst_pi.c tcopysign.c tcos.c tcosh.c tdim.c \
	tdiv.c tdiv_ui.c teq.c terf.c texceptions.c texp.c texp2.c \
	texpm1.c tfactorial.c tfits.c tfma.c tfrac.c tgamma.c tget_d.c \
	tget_d_2exp.c tget_sj.c tget_str.c tget_z.c tgmpop.c \
	thyperbolic.c thypot.c tinits.c tinp_str.c tisnan.c tlog.c \
	tlog10.c tlog1p.c tlog2.c tminmax.c tmul.c tmul_2exp.c \
	tmul_ui.c tnext.c tout_str.c toutimpl.c tpow.c tpow3.c \
	trandom.c trint.c tround_prec.c tset.c tset_d.c tset_exp.c \
	tset_f.c tset_ld.c tset_q.c tset_si.c tset_sj.c tset_str.c \
	tset_z.c tsgn.c tsi_op.c tsin.c tsin_cos.c tsinh.c tsqr.c \
	tsqrt.c tsqrt_ui.c tstrtofr.c tsub.c tsub1sp.c tsub_ui.c \
	tsum.c tswap.c ttan.c ttanh.c ttrunc.c tui_div.c tui_pow.c \
	tui_sub.c tversion.c tzeta.c
DIST_SOURCES = $(libfrtests_a_SOURCES) $(EXTRA_libfrtests_a_SOURCES) \
	mpf_compat.c mpfr_compat.c reuse.c tabs.c tacos.c tacosh.c \
	tadd.c tadd1sp.c tadd_ui.c tagm.c tasin.c tasinh.c tatan.c \
	tatanh.c tcan_round.c tcbrt.c tcheck.c tcmp.c tcmp2.c tcmp_d.c \
	tcmp_ld.c tcmp_ui.c tcmpabs.c tcomparisons.c tconst_euler.c \
	tconst_log2.c tconst_pi.c tcopysign.c tcos.c tcosh.c tdim.c \
	tdiv.c tdiv_ui.c teq.c terf.c texceptions.c texp.c texp2.c \
	texpm1.c tfactorial.c tfits.c tfma.c tfrac.c tgamma.c tget_d.c \
	tget_d_2exp.c tget_sj.c tget_str.c tget_z.c tgmpop.c \
	thyperbolic.c thypot.c tinits.c tinp_str.c tisnan.c tlog.c \
	tlog10.c tlog1p.c tlog2.c tminmax.c tmul.c tmul_2exp.c \
	tmul_ui.c tnext.c tout_str.c toutimpl.c tpow.c tpow3.c \
	trandom.c trint.c tround_prec.c tset.c tset_d.c tset_exp.c \
	tset_f.c tset_ld.c tset_q.c tset_si.c tset_sj.c tset_str.c \
	tset_z.c tsgn.c tsi_op.c tsin.c tsin_cos.c tsinh.c tsqr.c \
	tsqrt.c tsqrt_ui.c tstrtofr.c tsub.c tsub1sp.c tsub_ui.c \
	tsum.c tswap.c ttan.c ttanh.c ttrunc.c tui_div.c tui_pow.c \
	tui_sub.c tversion.c tzeta.c
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/ksh/cvs/commit/12-7/uClinux-dist/user/blkfin-apps/mpfr/missing --run aclocal-1.9
ALLOCA = 
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/ksh/cvs/commit/12-7/uClinux-dist/user/blkfin-apps/mpfr/missing --run tar
AUTOCONF = ${SHELL} /home/ksh/cvs/commit/12-7/uClinux-dist/user/blkfin-apps/mpfr/missing --run autoconf
AUTOHEADER = ${SHELL} /home/ksh/cvs/commit/12-7/uClinux-dist/user/blkfin-apps/mpfr/missing --run autoheader
AUTOMAKE = ${SHELL} /home/ksh/cvs/commit/12-7/uClinux-dist/user/blkfin-apps/mpfr/missing --run automake-1.9
AWK = gawk
CC = bfin-uclinux-gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -I../../../lib/gmp -ffloat-store
CPP = bfin-uclinux-gcc -E
CPPFLAGS = 
CYGPATH_W = echo
DEFS = -DTIME_WITH_SYS_TIME=1 -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_MEMSET=1 -DHAVE_STRTOL=1 -DHAVE_STDARG=1 -DHAVE_SYS_TIME_H=1 -DHAVE_GETTIMEOFDAY=1 -DHAVE_STRCASECMP=1 -DHAVE_STRNCASECMP=1 -DHAVE_HUGE_VAL=1 -DHAVE_LONG_DOUBLE=1 -DMPFR_HAVE_GMP_IMPL=1 
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
INCLUDES = -I$(top_srcdir) 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDADD = libfrtests.a $(MPFR_LIBM) $(top_builddir)/libmpfr.a
LDFLAGS = 
LIBOBJS = 
LIBS = -lgmp 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/ksh/cvs/commit/12-7/uClinux-dist/user/blkfin-apps/mpfr/missing --run makeinfo
MPFR_LIBM = -lm
OBJEXT = o
PACKAGE = mpfr
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
TESTS_ASM_OBJECTS = 
VERSION = 2.1.2
ac_ct_CC = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = bfin-unknown-linux-gnu
host_alias = bfin-linux
host_cpu = bfin
host_os = linux-gnu
host_vendor = unknown
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/ksh/cvs/commit/12-7/uClinux-dist/user/blkfin-apps/mpfr/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
AUTOMAKE_OPTIONS = gnu
EXTRA_DIST = tgeneric.c mpf_compat.h inp_str.data
check_LIBRARIES = libfrtests.a
libfrtests_a_SOURCES = memory.c rnd_mode.c tests.c cmp_str.c
EXTRA_libfrtests_a_SOURCES = amd64.asm x86.asm
libfrtests_a_DEPENDENCIES = $(TESTS_ASM_OBJECTS)
libfrtests_a_LIBADD = $(libfrtests_a_DEPENDENCIES)
TESTS = $(check_PROGRAMS)

# This $(srcdir) and $(CYGPATH_W) stuff follows automake 1.7.2
SUFFIXES = .asm
all: all-am

.SUFFIXES:
.SUFFIXES: .asm .c .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  tests/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  tests/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-checkLIBRARIES:
	-test -z "$(check_LIBRARIES)" || rm -f $(check_LIBRARIES)
libfrtests.a: $(libfrtests_a_OBJECTS) $(libfrtests_a_DEPENDENCIES) 
	-rm -f libfrtests.a
	$(libfrtests_a_AR) libfrtests.a $(libfrtests_a_OBJECTS) $(libfrtests_a_LIBADD)
	$(RANLIB) libfrtests.a

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
mpf_compat$(EXEEXT): $(mpf_compat_OBJECTS) $(mpf_compat_DEPENDENCIES) 
	@rm -f mpf_compat$(EXEEXT)
	$(LINK) $(mpf_compat_LDFLAGS) $(mpf_compat_OBJECTS) $(mpf_compat_LDADD) $(LIBS)
mpfr_compat$(EXEEXT): $(mpfr_compat_OBJECTS) $(mpfr_compat_DEPENDENCIES) 
	@rm -f mpfr_compat$(EXEEXT)
	$(LINK) $(mpfr_compat_LDFLAGS) $(mpfr_compat_OBJECTS) $(mpfr_compat_LDADD) $(LIBS)
reuse$(EXEEXT): $(reuse_OBJECTS) $(reuse_DEPENDENCIES) 
	@rm -f reuse$(EXEEXT)
	$(LINK) $(reuse_LDFLAGS) $(reuse_OBJECTS) $(reuse_LDADD) $(LIBS)
tabs$(EXEEXT): $(tabs_OBJECTS) $(tabs_DEPENDENCIES) 
	@rm -f tabs$(EXEEXT)
	$(LINK) $(tabs_LDFLAGS) $(tabs_OBJECTS) $(tabs_LDADD) $(LIBS)
tacos$(EXEEXT): $(tacos_OBJECTS) $(tacos_DEPENDENCIES) 
	@rm -f tacos$(EXEEXT)
	$(LINK) $(tacos_LDFLAGS) $(tacos_OBJECTS) $(tacos_LDADD) $(LIBS)
tacosh$(EXEEXT): $(tacosh_OBJECTS) $(tacosh_DEPENDENCIES) 
	@rm -f tacosh$(EXEEXT)
	$(LINK) $(tacosh_LDFLAGS) $(tacosh_OBJECTS) $(tacosh_LDADD) $(LIBS)
tadd$(EXEEXT): $(tadd_OBJECTS) $(tadd_DEPENDENCIES) 
	@rm -f tadd$(EXEEXT)
	$(LINK) $(tadd_LDFLAGS) $(tadd_OBJECTS) $(tadd_LDADD) $(LIBS)
tadd1sp$(EXEEXT): $(tadd1sp_OBJECTS) $(tadd1sp_DEPENDENCIES) 
	@rm -f tadd1sp$(EXEEXT)
	$(LINK) $(tadd1sp_LDFLAGS) $(tadd1sp_OBJECTS) $(tadd1sp_LDADD) $(LIBS)
tadd_ui$(EXEEXT): $(tadd_ui_OBJECTS) $(tadd_ui_DEPENDENCIES) 
	@rm -f tadd_ui$(EXEEXT)
	$(LINK) $(tadd_ui_LDFLAGS) $(tadd_ui_OBJECTS) $(tadd_ui_LDADD) $(LIBS)
tagm$(EXEEXT): $(tagm_OBJECTS) $(tagm_DEPENDENCIES) 
	@rm -f tagm$(EXEEXT)
	$(LINK) $(tagm_LDFLAGS) $(tagm_OBJECTS) $(tagm_LDADD) $(LIBS)
tasin$(EXEEXT): $(tasin_OBJECTS) $(tasin_DEPENDENCIES) 
	@rm -f tasin$(EXEEXT)
	$(LINK) $(tasin_LDFLAGS) $(tasin_OBJECTS) $(tasin_LDADD) $(LIBS)
tasinh$(EXEEXT): $(tasinh_OBJECTS) $(tasinh_DEPENDENCIES) 
	@rm -f tasinh$(EXEEXT)
	$(LINK) $(tasinh_LDFLAGS) $(tasinh_OBJECTS) $(tasinh_LDADD) $(LIBS)
tatan$(EXEEXT): $(tatan_OBJECTS) $(tatan_DEPENDENCIES) 
	@rm -f tatan$(EXEEXT)
	$(LINK) $(tatan_LDFLAGS) $(tatan_OBJECTS) $(tatan_LDADD) $(LIBS)
tatanh$(EXEEXT): $(tatanh_OBJECTS) $(tatanh_DEPENDENCIES) 
	@rm -f tatanh$(EXEEXT)
	$(LINK) $(tatanh_LDFLAGS) $(tatanh_OBJECTS) $(tatanh_LDADD) $(LIBS)
tcan_round$(EXEEXT): $(tcan_round_OBJECTS) $(tcan_round_DEPENDENCIES) 
	@rm -f tcan_round$(EXEEXT)
	$(LINK) $(tcan_round_LDFLAGS) $(tcan_round_OBJECTS) $(tcan_round_LDADD) $(LIBS)
tcbrt$(EXEEXT): $(tcbrt_OBJECTS) $(tcbrt_DEPENDENCIES) 
	@rm -f tcbrt$(EXEEXT)
	$(LINK) $(tcbrt_LDFLAGS) $(tcbrt_OBJECTS) $(tcbrt_LDADD) $(LIBS)
tcheck$(EXEEXT): $(tcheck_OBJECTS) $(tcheck_DEPENDENCIES) 
	@rm -f tcheck$(EXEEXT)
	$(LINK) $(tcheck_LDFLAGS) $(tcheck_OBJECTS) $(tcheck_LDADD) $(LIBS)
tcmp$(EXEEXT): $(tcmp_OBJECTS) $(tcmp_DEPENDENCIES) 
	@rm -f tcmp$(EXEEXT)
	$(LINK) $(tcmp_LDFLAGS) $(tcmp_OBJECTS) $(tcmp_LDADD) $(LIBS)
tcmp2$(EXEEXT): $(tcmp2_OBJECTS) $(tcmp2_DEPENDENCIES) 
	@rm -f tcmp2$(EXEEXT)
	$(LINK) $(tcmp2_LDFLAGS) $(tcmp2_OBJECTS) $(tcmp2_LDADD) $(LIBS)
tcmp_d$(EXEEXT): $(tcmp_d_OBJECTS) $(tcmp_d_DEPENDENCIES) 
	@rm -f tcmp_d$(EXEEXT)
	$(LINK) $(tcmp_d_LDFLAGS) $(tcmp_d_OBJECTS) $(tcmp_d_LDADD) $(LIBS)
tcmp_ld$(EXEEXT): $(tcmp_ld_OBJECTS) $(tcmp_ld_DEPENDENCIES) 
	@rm -f tcmp_ld$(EXEEXT)
	$(LINK) $(tcmp_ld_LDFLAGS) $(tcmp_ld_OBJECTS) $(tcmp_ld_LDADD) $(LIBS)
tcmp_ui$(EXEEXT): $(tcmp_ui_OBJECTS) $(tcmp_ui_DEPENDENCIES) 
	@rm -f tcmp_ui$(EXEEXT)
	$(LINK) $(tcmp_ui_LDFLAGS) $(tcmp_ui_OBJECTS) $(tcmp_ui_LDADD) $(LIBS)
tcmpabs$(EXEEXT): $(tcmpabs_OBJECTS) $(tcmpabs_DEPENDENCIES) 
	@rm -f tcmpabs$(EXEEXT)
	$(LINK) $(tcmpabs_LDFLAGS) $(tcmpabs_OBJECTS) $(tcmpabs_LDADD) $(LIBS)
tcomparisons$(EXEEXT): $(tcomparisons_OBJECTS) $(tcomparisons_DEPENDENCIES) 
	@rm -f tcomparisons$(EXEEXT)
	$(LINK) $(tcomparisons_LDFLAGS) $(tcomparisons_OBJECTS) $(tcomparisons_LDADD) $(LIBS)
tconst_euler$(EXEEXT): $(tconst_euler_OBJECTS) $(tconst_euler_DEPENDENCIES) 
	@rm -f tconst_euler$(EXEEXT)
	$(LINK) $(tconst_euler_LDFLAGS) $(tconst_euler_OBJECTS) $(tconst_euler_LDADD) $(LIBS)
tconst_log2$(EXEEXT): $(tconst_log2_OBJECTS) $(tconst_log2_DEPENDENCIES) 
	@rm -f tconst_log2$(EXEEXT)
	$(LINK) $(tconst_log2_LDFLAGS) $(tconst_log2_OBJECTS) $(tconst_log2_LDADD) $(LIBS)
tconst_pi$(EXEEXT): $(tconst_pi_OBJECTS) $(tconst_pi_DEPENDENCIES) 
	@rm -f tconst_pi$(EXEEXT)
	$(LINK) $(tconst_pi_LDFLAGS) $(tconst_pi_OBJECTS) $(tconst_pi_LDADD) $(LIBS)
tcopysign$(EXEEXT): $(tcopysign_OBJECTS) $(tcopysign_DEPENDENCIES) 
	@rm -f tcopysign$(EXEEXT)
	$(LINK) $(tcopysign_LDFLAGS) $(tcopysign_OBJECTS) $(tcopysign_LDADD) $(LIBS)
tcos$(EXEEXT): $(tcos_OBJECTS) $(tcos_DEPENDENCIES) 
	@rm -f tcos$(EXEEXT)
	$(LINK) $(tcos_LDFLAGS) $(tcos_OBJECTS) $(tcos_LDADD) $(LIBS)
tcosh$(EXEEXT): $(tcosh_OBJECTS) $(tcosh_DEPENDENCIES) 
	@rm -f tcosh$(EXEEXT)
	$(LINK) $(tcosh_LDFLAGS) $(tcosh_OBJECTS) $(tcosh_LDADD) $(LIBS)
tdim$(EXEEXT): $(tdim_OBJECTS) $(tdim_DEPENDENCIES) 
	@rm -f tdim$(EXEEXT)
	$(LINK) $(tdim_LDFLAGS) $(tdim_OBJECTS) $(tdim_LDADD) $(LIBS)
tdiv$(EXEEXT): $(tdiv_OBJECTS) $(tdiv_DEPENDENCIES) 
	@rm -f tdiv$(EXEEXT)
	$(LINK) $(tdiv_LDFLAGS) $(tdiv_OBJECTS) $(tdiv_LDADD) $(LIBS)
tdiv_ui$(EXEEXT): $(tdiv_ui_OBJECTS) $(tdiv_ui_DEPENDENCIES) 
	@rm -f tdiv_ui$(EXEEXT)
	$(LINK) $(tdiv_ui_LDFLAGS) $(tdiv_ui_OBJECTS) $(tdiv_ui_LDADD) $(LIBS)
teq$(EXEEXT): $(teq_OBJECTS) $(teq_DEPENDENCIES) 
	@rm -f teq$(EXEEXT)
	$(LINK) $(teq_LDFLAGS) $(teq_OBJECTS) $(teq_LDADD) $(LIBS)
terf$(EXEEXT): $(terf_OBJECTS) $(terf_DEPENDENCIES) 
	@rm -f terf$(EXEEXT)
	$(LINK) $(terf_LDFLAGS) $(terf_OBJECTS) $(terf_LDADD) $(LIBS)
texceptions$(EXEEXT): $(texceptions_OBJECTS) $(texceptions_DEPENDENCIES) 
	@rm -f texceptions$(EXEEXT)
	$(LINK) $(texceptions_LDFLAGS) $(texceptions_OBJECTS) $(texceptions_LDADD) $(LIBS)
texp$(EXEEXT): $(texp_OBJECTS) $(texp_DEPENDENCIES) 
	@rm -f texp$(EXEEXT)
	$(LINK) $(texp_LDFLAGS) $(texp_OBJECTS) $(texp_LDADD) $(LIBS)
texp2$(EXEEXT): $(texp2_OBJECTS) $(texp2_DEPENDENCIES) 
	@rm -f texp2$(EXEEXT)
	$(LINK) $(texp2_LDFLAGS) $(texp2_OBJECTS) $(texp2_LDADD) $(LIBS)
texpm1$(EXEEXT): $(texpm1_OBJECTS) $(texpm1_DEPENDENCIES) 
	@rm -f texpm1$(EXEEXT)
	$(LINK) $(texpm1_LDFLAGS) $(texpm1_OBJECTS) $(texpm1_LDADD) $(LIBS)
tfactorial$(EXEEXT): $(tfactorial_OBJECTS) $(tfactorial_DEPENDENCIES) 
	@rm -f tfactorial$(EXEEXT)
	$(LINK) $(tfactorial_LDFLAGS) $(tfactorial_OBJECTS) $(tfactorial_LDADD) $(LIBS)
tfits$(EXEEXT): $(tfits_OBJECTS) $(tfits_DEPENDENCIES) 
	@rm -f tfits$(EXEEXT)
	$(LINK) $(tfits_LDFLAGS) $(tfits_OBJECTS) $(tfits_LDADD) $(LIBS)
tfma$(EXEEXT): $(tfma_OBJECTS) $(tfma_DEPENDENCIES) 
	@rm -f tfma$(EXEEXT)
	$(LINK) $(tfma_LDFLAGS) $(tfma_OBJECTS) $(tfma_LDADD) $(LIBS)
tfrac$(EXEEXT): $(tfrac_OBJECTS) $(tfrac_DEPENDENCIES) 
	@rm -f tfrac$(EXEEXT)
	$(LINK) $(tfrac_LDFLAGS) $(tfrac_OBJECTS) $(tfrac_LDADD) $(LIBS)
tgamma$(EXEEXT): $(tgamma_OBJECTS) $(tgamma_DEPENDENCIES) 
	@rm -f tgamma$(EXEEXT)
	$(LINK) $(tgamma_LDFLAGS) $(tgamma_OBJECTS) $(tgamma_LDADD) $(LIBS)
tget_d$(EXEEXT): $(tget_d_OBJECTS) $(tget_d_DEPENDENCIES) 
	@rm -f tget_d$(EXEEXT)
	$(LINK) $(tget_d_LDFLAGS) $(tget_d_OBJECTS) $(tget_d_LDADD) $(LIBS)
tget_d_2exp$(EXEEXT): $(tget_d_2exp_OBJECTS) $(tget_d_2exp_DEPENDENCIES) 
	@rm -f tget_d_2exp$(EXEEXT)
	$(LINK) $(tget_d_2exp_LDFLAGS) $(tget_d_2exp_OBJECTS) $(tget_d_2exp_LDADD) $(LIBS)
tget_sj$(EXEEXT): $(tget_sj_OBJECTS) $(tget_sj_DEPENDENCIES) 
	@rm -f tget_sj$(EXEEXT)
	$(LINK) $(tget_sj_LDFLAGS) $(tget_sj_OBJECTS) $(tget_sj_LDADD) $(LIBS)
tget_str$(EXEEXT): $(tget_str_OBJECTS) $(tget_str_DEPENDENCIES) 
	@rm -f tget_str$(EXEEXT)
	$(LINK) $(tget_str_LDFLAGS) $(tget_str_OBJECTS) $(tget_str_LDADD) $(LIBS)
tget_z$(EXEEXT): $(tget_z_OBJECTS) $(tget_z_DEPENDENCIES) 
	@rm -f tget_z$(EXEEXT)
	$(LINK) $(tget_z_LDFLAGS) $(tget_z_OBJECTS) $(tget_z_LDADD) $(LIBS)
tgmpop$(EXEEXT): $(tgmpop_OBJECTS) $(tgmpop_DEPENDENCIES) 
	@rm -f tgmpop$(EXEEXT)
	$(LINK) $(tgmpop_LDFLAGS) $(tgmpop_OBJECTS) $(tgmpop_LDADD) $(LIBS)
thyperbolic$(EXEEXT): $(thyperbolic_OBJECTS) $(thyperbolic_DEPENDENCIES) 
	@rm -f thyperbolic$(EXEEXT)
	$(LINK) $(thyperbolic_LDFLAGS) $(thyperbolic_OBJECTS) $(thyperbolic_LDADD) $(LIBS)
thypot$(EXEEXT): $(thypot_OBJECTS) $(thypot_DEPENDENCIES) 
	@rm -f thypot$(EXEEXT)
	$(LINK) $(thypot_LDFLAGS) $(thypot_OBJECTS) $(thypot_LDADD) $(LIBS)
tinits$(EXEEXT): $(tinits_OBJECTS) $(tinits_DEPENDENCIES) 
	@rm -f tinits$(EXEEXT)
	$(LINK) $(tinits_LDFLAGS) $(tinits_OBJECTS) $(tinits_LDADD) $(LIBS)
tinp_str$(EXEEXT): $(tinp_str_OBJECTS) $(tinp_str_DEPENDENCIES) 
	@rm -f tinp_str$(EXEEXT)
	$(LINK) $(tinp_str_LDFLAGS) $(tinp_str_OBJECTS) $(tinp_str_LDADD) $(LIBS)
tisnan$(EXEEXT): $(tisnan_OBJECTS) $(tisnan_DEPENDENCIES) 
	@rm -f tisnan$(EXEEXT)
	$(LINK) $(tisnan_LDFLAGS) $(tisnan_OBJECTS) $(tisnan_LDADD) $(LIBS)
tlog$(EXEEXT): $(tlog_OBJECTS) $(tlog_DEPENDENCIES) 
	@rm -f tlog$(EXEEXT)
	$(LINK) $(tlog_LDFLAGS) $(tlog_OBJECTS) $(tlog_LDADD) $(LIBS)
tlog10$(EXEEXT): $(tlog10_OBJECTS) $(tlog10_DEPENDENCIES) 
	@rm -f tlog10$(EXEEXT)
	$(LINK) $(tlog10_LDFLAGS) $(tlog10_OBJECTS) $(tlog10_LDADD) $(LIBS)
tlog1p$(EXEEXT): $(tlog1p_OBJECTS) $(tlog1p_DEPENDENCIES) 
	@rm -f tlog1p$(EXEEXT)
	$(LINK) $(tlog1p_LDFLAGS) $(tlog1p_OBJECTS) $(tlog1p_LDADD) $(LIBS)
tlog2$(EXEEXT): $(tlog2_OBJECTS) $(tlog2_DEPENDENCIES) 
	@rm -f tlog2$(EXEEXT)
	$(LINK) $(tlog2_LDFLAGS) $(tlog2_OBJECTS) $(tlog2_LDADD) $(LIBS)
tminmax$(EXEEXT): $(tminmax_OBJECTS) $(tminmax_DEPENDENCIES) 
	@rm -f tminmax$(EXEEXT)
	$(LINK) $(tminmax_LDFLAGS) $(tminmax_OBJECTS) $(tminmax_LDADD) $(LIBS)
tmul$(EXEEXT): $(tmul_OBJECTS) $(tmul_DEPENDENCIES) 
	@rm -f tmul$(EXEEXT)
	$(LINK) $(tmul_LDFLAGS) $(tmul_OBJECTS) $(tmul_LDADD) $(LIBS)
tmul_2exp$(EXEEXT): $(tmul_2exp_OBJECTS) $(tmul_2exp_DEPENDENCIES) 
	@rm -f tmul_2exp$(EXEEXT)
	$(LINK) $(tmul_2exp_LDFLAGS) $(tmul_2exp_OBJECTS) $(tmul_2exp_LDADD) $(LIBS)
tmul_ui$(EXEEXT): $(tmul_ui_OBJECTS) $(tmul_ui_DEPENDENCIES) 
	@rm -f tmul_ui$(EXEEXT)
	$(LINK) $(tmul_ui_LDFLAGS) $(tmul_ui_OBJECTS) $(tmul_ui_LDADD) $(LIBS)
tnext$(EXEEXT): $(tnext_OBJECTS) $(tnext_DEPENDENCIES) 
	@rm -f tnext$(EXEEXT)
	$(LINK) $(tnext_LDFLAGS) $(tnext_OBJECTS) $(tnext_LDADD) $(LIBS)
tout_str$(EXEEXT): $(tout_str_OBJECTS) $(tout_str_DEPENDENCIES) 
	@rm -f tout_str$(EXEEXT)
	$(LINK) $(tout_str_LDFLAGS) $(tout_str_OBJECTS) $(tout_str_LDADD) $(LIBS)
toutimpl$(EXEEXT): $(toutimpl_OBJECTS) $(toutimpl_DEPENDENCIES) 
	@rm -f toutimpl$(EXEEXT)
	$(LINK) $(toutimpl_LDFLAGS) $(toutimpl_OBJECTS) $(toutimpl_LDADD) $(LIBS)
tpow$(EXEEXT): $(tpow_OBJECTS) $(tpow_DEPENDENCIES) 
	@rm -f tpow$(EXEEXT)
	$(LINK) $(tpow_LDFLAGS) $(tpow_OBJECTS) $(tpow_LDADD) $(LIBS)
tpow3$(EXEEXT): $(tpow3_OBJECTS) $(tpow3_DEPENDENCIES) 
	@rm -f tpow3$(EXEEXT)
	$(LINK) $(tpow3_LDFLAGS) $(tpow3_OBJECTS) $(tpow3_LDADD) $(LIBS)
trandom$(EXEEXT): $(trandom_OBJECTS) $(trandom_DEPENDENCIES) 
	@rm -f trandom$(EXEEXT)
	$(LINK) $(trandom_LDFLAGS) $(trandom_OBJECTS) $(trandom_LDADD) $(LIBS)
trint$(EXEEXT): $(trint_OBJECTS) $(trint_DEPENDENCIES) 
	@rm -f trint$(EXEEXT)
	$(LINK) $(trint_LDFLAGS) $(trint_OBJECTS) $(trint_LDADD) $(LIBS)
tround_prec$(EXEEXT): $(tround_prec_OBJECTS) $(tround_prec_DEPENDENCIES) 
	@rm -f tround_prec$(EXEEXT)
	$(LINK) $(tround_prec_LDFLAGS) $(tround_prec_OBJECTS) $(tround_prec_LDADD) $(LIBS)
tset$(EXEEXT): $(tset_OBJECTS) $(tset_DEPENDENCIES) 
	@rm -f tset$(EXEEXT)
	$(LINK) $(tset_LDFLAGS) $(tset_OBJECTS) $(tset_LDADD) $(LIBS)
tset_d$(EXEEXT): $(tset_d_OBJECTS) $(tset_d_DEPENDENCIES) 
	@rm -f tset_d$(EXEEXT)
	$(LINK) $(tset_d_LDFLAGS) $(tset_d_OBJECTS) $(tset_d_LDADD) $(LIBS)
tset_exp$(EXEEXT): $(tset_exp_OBJECTS) $(tset_exp_DEPENDENCIES) 
	@rm -f tset_exp$(EXEEXT)
	$(LINK) $(tset_exp_LDFLAGS) $(tset_exp_OBJECTS) $(tset_exp_LDADD) $(LIBS)
tset_f$(EXEEXT): $(tset_f_OBJECTS) $(tset_f_DEPENDENCIES) 
	@rm -f tset_f$(EXEEXT)
	$(LINK) $(tset_f_LDFLAGS) $(tset_f_OBJECTS) $(tset_f_LDADD) $(LIBS)
tset_ld$(EXEEXT): $(tset_ld_OBJECTS) $(tset_ld_DEPENDENCIES) 
	@rm -f tset_ld$(EXEEXT)
	$(LINK) $(tset_ld_LDFLAGS) $(tset_ld_OBJECTS) $(tset_ld_LDADD) $(LIBS)
tset_q$(EXEEXT): $(tset_q_OBJECTS) $(tset_q_DEPENDENCIES) 
	@rm -f tset_q$(EXEEXT)
	$(LINK) $(tset_q_LDFLAGS) $(tset_q_OBJECTS) $(tset_q_LDADD) $(LIBS)
tset_si$(EXEEXT): $(tset_si_OBJECTS) $(tset_si_DEPENDENCIES) 
	@rm -f tset_si$(EXEEXT)
	$(LINK) $(tset_si_LDFLAGS) $(tset_si_OBJECTS) $(tset_si_LDADD) $(LIBS)
tset_sj$(EXEEXT): $(tset_sj_OBJECTS) $(tset_sj_DEPENDENCIES) 
	@rm -f tset_sj$(EXEEXT)
	$(LINK) $(tset_sj_LDFLAGS) $(tset_sj_OBJECTS) $(tset_sj_LDADD) $(LIBS)
tset_str$(EXEEXT): $(tset_str_OBJECTS) $(tset_str_DEPENDENCIES) 
	@rm -f tset_str$(EXEEXT)
	$(LINK) $(tset_str_LDFLAGS) $(tset_str_OBJECTS) $(tset_str_LDADD) $(LIBS)
tset_z$(EXEEXT): $(tset_z_OBJECTS) $(tset_z_DEPENDENCIES) 
	@rm -f tset_z$(EXEEXT)
	$(LINK) $(tset_z_LDFLAGS) $(tset_z_OBJECTS) $(tset_z_LDADD) $(LIBS)
tsgn$(EXEEXT): $(tsgn_OBJECTS) $(tsgn_DEPENDENCIES) 
	@rm -f tsgn$(EXEEXT)
	$(LINK) $(tsgn_LDFLAGS) $(tsgn_OBJECTS) $(tsgn_LDADD) $(LIBS)
tsi_op$(EXEEXT): $(tsi_op_OBJECTS) $(tsi_op_DEPENDENCIES) 
	@rm -f tsi_op$(EXEEXT)
	$(LINK) $(tsi_op_LDFLAGS) $(tsi_op_OBJECTS) $(tsi_op_LDADD) $(LIBS)
tsin$(EXEEXT): $(tsin_OBJECTS) $(tsin_DEPENDENCIES) 
	@rm -f tsin$(EXEEXT)
	$(LINK) $(tsin_LDFLAGS) $(tsin_OBJECTS) $(tsin_LDADD) $(LIBS)
tsin_cos$(EXEEXT): $(tsin_cos_OBJECTS) $(tsin_cos_DEPENDENCIES) 
	@rm -f tsin_cos$(EXEEXT)
	$(LINK) $(tsin_cos_LDFLAGS) $(tsin_cos_OBJECTS) $(tsin_cos_LDADD) $(LIBS)
tsinh$(EXEEXT): $(tsinh_OBJECTS) $(tsinh_DEPENDENCIES) 
	@rm -f tsinh$(EXEEXT)
	$(LINK) $(tsinh_LDFLAGS) $(tsinh_OBJECTS) $(tsinh_LDADD) $(LIBS)
tsqr$(EXEEXT): $(tsqr_OBJECTS) $(tsqr_DEPENDENCIES) 
	@rm -f tsqr$(EXEEXT)
	$(LINK) $(tsqr_LDFLAGS) $(tsqr_OBJECTS) $(tsqr_LDADD) $(LIBS)
tsqrt$(EXEEXT): $(tsqrt_OBJECTS) $(tsqrt_DEPENDENCIES) 
	@rm -f tsqrt$(EXEEXT)
	$(LINK) $(tsqrt_LDFLAGS) $(tsqrt_OBJECTS) $(tsqrt_LDADD) $(LIBS)
tsqrt_ui$(EXEEXT): $(tsqrt_ui_OBJECTS) $(tsqrt_ui_DEPENDENCIES) 
	@rm -f tsqrt_ui$(EXEEXT)
	$(LINK) $(tsqrt_ui_LDFLAGS) $(tsqrt_ui_OBJECTS) $(tsqrt_ui_LDADD) $(LIBS)
tstrtofr$(EXEEXT): $(tstrtofr_OBJECTS) $(tstrtofr_DEPENDENCIES) 
	@rm -f tstrtofr$(EXEEXT)
	$(LINK) $(tstrtofr_LDFLAGS) $(tstrtofr_OBJECTS) $(tstrtofr_LDADD) $(LIBS)
tsub$(EXEEXT): $(tsub_OBJECTS) $(tsub_DEPENDENCIES) 
	@rm -f tsub$(EXEEXT)
	$(LINK) $(tsub_LDFLAGS) $(tsub_OBJECTS) $(tsub_LDADD) $(LIBS)
tsub1sp$(EXEEXT): $(tsub1sp_OBJECTS) $(tsub1sp_DEPENDENCIES) 
	@rm -f tsub1sp$(EXEEXT)
	$(LINK) $(tsub1sp_LDFLAGS) $(tsub1sp_OBJECTS) $(tsub1sp_LDADD) $(LIBS)
tsub_ui$(EXEEXT): $(tsub_ui_OBJECTS) $(tsub_ui_DEPENDENCIES) 
	@rm -f tsub_ui$(EXEEXT)
	$(LINK) $(tsub_ui_LDFLAGS) $(tsub_ui_OBJECTS) $(tsub_ui_LDADD) $(LIBS)
tsum$(EXEEXT): $(tsum_OBJECTS) $(tsum_DEPENDENCIES) 
	@rm -f tsum$(EXEEXT)
	$(LINK) $(tsum_LDFLAGS) $(tsum_OBJECTS) $(tsum_LDADD) $(LIBS)
tswap$(EXEEXT): $(tswap_OBJECTS) $(tswap_DEPENDENCIES) 
	@rm -f tswap$(EXEEXT)
	$(LINK) $(tswap_LDFLAGS) $(tswap_OBJECTS) $(tswap_LDADD) $(LIBS)
ttan$(EXEEXT): $(ttan_OBJECTS) $(ttan_DEPENDENCIES) 
	@rm -f ttan$(EXEEXT)
	$(LINK) $(ttan_LDFLAGS) $(ttan_OBJECTS) $(ttan_LDADD) $(LIBS)
ttanh$(EXEEXT): $(ttanh_OBJECTS) $(ttanh_DEPENDENCIES) 
	@rm -f ttanh$(EXEEXT)
	$(LINK) $(ttanh_LDFLAGS) $(ttanh_OBJECTS) $(ttanh_LDADD) $(LIBS)
ttrunc$(EXEEXT): $(ttrunc_OBJECTS) $(ttrunc_DEPENDENCIES) 
	@rm -f ttrunc$(EXEEXT)
	$(LINK) $(ttrunc_LDFLAGS) $(ttrunc_OBJECTS) $(ttrunc_LDADD) $(LIBS)
tui_div$(EXEEXT): $(tui_div_OBJECTS) $(tui_div_DEPENDENCIES) 
	@rm -f tui_div$(EXEEXT)
	$(LINK) $(tui_div_LDFLAGS) $(tui_div_OBJECTS) $(tui_div_LDADD) $(LIBS)
tui_pow$(EXEEXT): $(tui_pow_OBJECTS) $(tui_pow_DEPENDENCIES) 
	@rm -f tui_pow$(EXEEXT)
	$(LINK) $(tui_pow_LDFLAGS) $(tui_pow_OBJECTS) $(tui_pow_LDADD) $(LIBS)
tui_sub$(EXEEXT): $(tui_sub_OBJECTS) $(tui_sub_DEPENDENCIES) 
	@rm -f tui_sub$(EXEEXT)
	$(LINK) $(tui_sub_LDFLAGS) $(tui_sub_OBJECTS) $(tui_sub_LDADD) $(LIBS)
tversion$(EXEEXT): $(tversion_OBJECTS) $(tversion_DEPENDENCIES) 
	@rm -f tversion$(EXEEXT)
	$(LINK) $(tversion_LDFLAGS) $(tversion_OBJECTS) $(tversion_LDADD) $(LIBS)
tzeta$(EXEEXT): $(tzeta_OBJECTS) $(tzeta_DEPENDENCIES) 
	@rm -f tzeta$(EXEEXT)
	$(LINK) $(tzeta_LDFLAGS) $(tzeta_OBJECTS) $(tzeta_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/cmp_str.Po
include ./$(DEPDIR)/memory.Po
include ./$(DEPDIR)/mpf_compat.Po
include ./$(DEPDIR)/mpfr_compat.Po
include ./$(DEPDIR)/reuse.Po
include ./$(DEPDIR)/rnd_mode.Po
include ./$(DEPDIR)/tabs.Po
include ./$(DEPDIR)/tacos.Po
include ./$(DEPDIR)/tacosh.Po
include ./$(DEPDIR)/tadd.Po
include ./$(DEPDIR)/tadd1sp.Po
include ./$(DEPDIR)/tadd_ui.Po
include ./$(DEPDIR)/tagm.Po
include ./$(DEPDIR)/tasin.Po
include ./$(DEPDIR)/tasinh.Po
include ./$(DEPDIR)/tatan.Po
include ./$(DEPDIR)/tatanh.Po
include ./$(DEPDIR)/tcan_round.Po
include ./$(DEPDIR)/tcbrt.Po
include ./$(DEPDIR)/tcheck.Po
include ./$(DEPDIR)/tcmp.Po
include ./$(DEPDIR)/tcmp2.Po
include ./$(DEPDIR)/tcmp_d.Po
include ./$(DEPDIR)/tcmp_ld.Po
include ./$(DEPDIR)/tcmp_ui.Po
include ./$(DEPDIR)/tcmpabs.Po
include ./$(DEPDIR)/tcomparisons.Po
include ./$(DEPDIR)/tconst_euler.Po
include ./$(DEPDIR)/tconst_log2.Po
include ./$(DEPDIR)/tconst_pi.Po
include ./$(DEPDIR)/tcopysign.Po
include ./$(DEPDIR)/tcos.Po
include ./$(DEPDIR)/tcosh.Po
include ./$(DEPDIR)/tdim.Po
include ./$(DEPDIR)/tdiv.Po
include ./$(DEPDIR)/tdiv_ui.Po
include ./$(DEPDIR)/teq.Po
include ./$(DEPDIR)/terf.Po
include ./$(DEPDIR)/tests.Po
include ./$(DEPDIR)/texceptions.Po
include ./$(DEPDIR)/texp.Po
include ./$(DEPDIR)/texp2.Po
include ./$(DEPDIR)/texpm1.Po
include ./$(DEPDIR)/tfactorial.Po
include ./$(DEPDIR)/tfits.Po
include ./$(DEPDIR)/tfma.Po
include ./$(DEPDIR)/tfrac.Po
include ./$(DEPDIR)/tgamma.Po
include ./$(DEPDIR)/tget_d.Po
include ./$(DEPDIR)/tget_d_2exp.Po
include ./$(DEPDIR)/tget_sj.Po
include ./$(DEPDIR)/tget_str.Po
include ./$(DEPDIR)/tget_z.Po
include ./$(DEPDIR)/tgmpop.Po
include ./$(DEPDIR)/thyperbolic.Po
include ./$(DEPDIR)/thypot.Po
include ./$(DEPDIR)/tinits.Po
include ./$(DEPDIR)/tinp_str.Po
include ./$(DEPDIR)/tisnan.Po
include ./$(DEPDIR)/tlog.Po
include ./$(DEPDIR)/tlog10.Po
include ./$(DEPDIR)/tlog1p.Po
include ./$(DEPDIR)/tlog2.Po
include ./$(DEPDIR)/tminmax.Po
include ./$(DEPDIR)/tmul.Po
include ./$(DEPDIR)/tmul_2exp.Po
include ./$(DEPDIR)/tmul_ui.Po
include ./$(DEPDIR)/tnext.Po
include ./$(DEPDIR)/tout_str.Po
include ./$(DEPDIR)/toutimpl.Po
include ./$(DEPDIR)/tpow.Po
include ./$(DEPDIR)/tpow3.Po
include ./$(DEPDIR)/trandom.Po
include ./$(DEPDIR)/trint.Po
include ./$(DEPDIR)/tround_prec.Po
include ./$(DEPDIR)/tset.Po
include ./$(DEPDIR)/tset_d.Po
include ./$(DEPDIR)/tset_exp.Po
include ./$(DEPDIR)/tset_f.Po
include ./$(DEPDIR)/tset_ld.Po
include ./$(DEPDIR)/tset_q.Po
include ./$(DEPDIR)/tset_si.Po
include ./$(DEPDIR)/tset_sj.Po
include ./$(DEPDIR)/tset_str.Po
include ./$(DEPDIR)/tset_z.Po
include ./$(DEPDIR)/tsgn.Po
include ./$(DEPDIR)/tsi_op.Po
include ./$(DEPDIR)/tsin.Po
include ./$(DEPDIR)/tsin_cos.Po
include ./$(DEPDIR)/tsinh.Po
include ./$(DEPDIR)/tsqr.Po
include ./$(DEPDIR)/tsqrt.Po
include ./$(DEPDIR)/tsqrt_ui.Po
include ./$(DEPDIR)/tstrtofr.Po
include ./$(DEPDIR)/tsub.Po
include ./$(DEPDIR)/tsub1sp.Po
include ./$(DEPDIR)/tsub_ui.Po
include ./$(DEPDIR)/tsum.Po
include ./$(DEPDIR)/tswap.Po
include ./$(DEPDIR)/ttan.Po
include ./$(DEPDIR)/ttanh.Po
include ./$(DEPDIR)/ttrunc.Po
include ./$(DEPDIR)/tui_div.Po
include ./$(DEPDIR)/tui_pow.Po
include ./$(DEPDIR)/tui_sub.Po
include ./$(DEPDIR)/tversion.Po
include ./$(DEPDIR)/tzeta.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_LIBRARIES) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkLIBRARIES clean-checkPROGRAMS clean-generic \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkLIBRARIES clean-checkPROGRAMS clean-generic ctags \
	distclean distclean-compile distclean-generic distclean-tags \
	distdir dvi dvi-am html html-am info info-am install \
	install-am install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-info-am


$(top_builddir)/libmpfr.a:
	cd $(top_builddir); make libmpfr.a
.asm.o:
	grep -v '^#' `test -f '$<' || echo '$(srcdir)/'`$< >tmp-$*.s
	$(COMPILE) -c tmp-$*.s -o $@
	rm -f tmp-$*.s
.asm.obj:
	grep -v '^#' `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<' >tmp-$*.s
	$(COMPILE) -c tmp-$*.s -o $@
	rm -f tmp-$*.s
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
