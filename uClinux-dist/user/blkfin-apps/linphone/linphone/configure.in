dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)

dnl Source packaging numbers
LINPHONE_MAJOR_VERSION=1
LINPHONE_MINOR_VERSION=1
LINPHONE_MICRO_VERSION=0
LINPHONE_EXTRA_VERSION=

dnl program extension
LINPHONE_VERSION=$LINPHONE_MAJOR_VERSION.$LINPHONE_MINOR_VERSION.${LINPHONE_MICRO_VERSION}${LINPHONE_EXTRA_VERSION}

LIBLINPHONE_SO_VERSION=`expr $LINPHONE_MINOR_VERSION + $LINPHONE_MAJOR_VERSION`:$LINPHONE_MICRO_VERSION:$LINPHONE_MINOR_VERSION

AC_SUBST(LIBLINPHONE_SO_VERSION, $LIBLINPHONE_SO_VERSION)
AC_SUBST(LINPHONE_VERSION)

VERSION=$LINPHONE_VERSION
PACKAGE=linphone

AC_MSG_NOTICE([$PACKAGE-$VERSION		A full featured audio sip phone.])
AC_MSG_NOTICE([licensed under the terms of the General Public License (GPL)])

AM_INIT_AUTOMAKE($PACKAGE,$VERSION,no-define)
AM_CONFIG_HEADER(config.h)


AC_ISC_POSIX
AC_PROG_CC
AC_C_INLINE
AM_PROG_CC_STDC
AC_HEADER_STDC
dnl localization tools
IT_PROG_INTLTOOL
dnl Initialize libtool
AC_PROG_LIBTOOL
AM_PROG_LIBTOOL
AC_ENABLE_SHARED(yes)
AC_ENABLE_STATIC(no)
dnl Add the languages which your application supports here.
ALL_LINGUAS="fr it de ja es pl cs nl"
GETTEXT_PACKAGE=linphone
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE",[The name of the gettext package name])
AM_GLIB_GNU_GETTEXT
AC_CHECK_LIB(intl,libintl_gettext)

AC_CHECK_FUNCS([get_current_dir_name strndup stpcpy] )

dnl conditionnal build without glib support
AC_ARG_ENABLE(glib,
      [  --enable-glib    Turn on glib support],
      [case "${enableval}" in
        yes) useglib=true ;;
        no)  useglib=false ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-glib) ;;
      esac],[useglib=true])

dnl conditionnal build of gnome interface.
AC_ARG_ENABLE(gnome_ui,
      [  --enable-gnome_ui=[yes/no]    Turn on or off compilation of gnome interface [default=yes]],
      [case "${enableval}" in
        yes) gnome_ui=true ;;
        no)  gnome_ui=false ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-gnome_ui) ;;
      esac],[gnome_ui=true])


if test "$useglib" = "true"; then
  AM_PATH_GLIB_2_0(2.0.0,
        AC_DEFINE(HAVE_GLIB,1,[Defined when glib-2.0 was found]) ,
  [ AC_MSG_WARN( [Can't find glib with version > 2.0.0. Only compilation on linux without glib is supported.]); useglib=false],
   gthread gmodule)
fi

dnl we use a fake minimal glib for linux compile when the real glib is not availlable.
if test "$useglib" = "false"; then
  CFLAGS="$CFLAGS -I\$(top_srcdir)/support"
  gnome_ui=false
fi


if test "$gnome_ui" = "true" ; then

PKG_CHECK_MODULES(LIBGNOMEUI,libgnomeui-2.0 >= 1.96.0, ,gnome_ui=false)
AC_SUBST(LIBGNOMEUI_CFLAGS)
AC_SUBST(LIBGNOMEUI_LIBS)

PKG_CHECK_MODULES(LIBGNOME,libgnome-2.0 >= 1.96.0, ,gnome_ui=false)
AC_SUBST(LIBGNOME_CFLAGS)
AC_SUBST(LIBGNOME_LIBS)

PKG_CHECK_MODULES(LIBGTK, gtk+-2.0 >= 2.4.0, ,
[ gnome_ui=false; AC_MSG_WARN(Could not find gtk+>=2.4.0; gnome interface cannot be build.) ] )

PKG_CHECK_MODULES(GNOME_APPLETS, libpanelapplet-2.0 >= 2.0.0 , 
				build_gnome_applet=true,build_gnome_applet=false)
AC_SUBST(GNOME_APPLETS_CFLAGS)
AC_SUBST(GNOME_APPLETS_LIBS)

if test "$gnome_ui" = "true" ; then
  AC_DEFINE(HAVE_GNOME,1,[Defined if we can use the gnome api])
else
  missing_gnome_libs=true
fi
  
else
DATADIRNAME=share
echo "Gnome interface compilation is disabled."
fi


dnl os-specific problems not handled by existing macros.
case "$host_os" in
	*freebsd*)
		LDFLAGS="$LDFLAGS -pthread"
		AC_DEFINE(__FreeBSD__,1,[Defined if we are compiling for FreeBSD])
		;;
	*linux*)
		AC_DEFINE(__LINUX__,1,[Defined if we are compiling for linux])
		;;
esac

case "$host_cpu" in
	*arm*)
		AC_DEFINE(__ARM__,1,[Defined if we are compiling for arm processor])
		use_arm_toolchain=yes
		;;
esac

if test "$GCC" = "yes" ; then
	STRICT_OPTIONS="-Wall -Werror"
fi
AC_SUBST(STRICT_OPTIONS)

AC_ARG_WITH( realprefix,
      [  --with-realprefix      Set the real installation prefix. This option has to be used for cross-compilation only. (ex:/usr or /usr/local)[default=none] ],
      [ realprefix=${withval}],[ realprefix="none" ])



AC_ARG_ENABLE(manual,
      [  --disable-manual    Do not attempt to build html linphone's user documentation],
      [case "${enableval}" in
        yes) build_manual=yes ;;
        no)  build_manual=false ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-manual) ;;
      esac],[build_manual=yes])


dnl conditionnal build of ALSA support
AC_ARG_ENABLE(alsa,
      [  --enable-alsa    Turn on alsa native support compiling],
      [case "${enableval}" in
        yes) alsa=true ;;
        no)  alsa=false ;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-alsa) ;;
      esac],[alsa=true])

dnl enable ipv6 support
AC_ARG_ENABLE(ipv6,
      [  --enable-ipv6    Turn on ipv6 support],
      [case "${enableval}" in
        yes)  ipv6=true;;
        no)   ipv6=false;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-ipv6) ;;
      esac],[ipv6=true])
IPV6_CFLAGS=
if test x$ipv6 = xtrue ; then
	IPV6_CFLAGS=-DINET6
fi
AC_SUBST(IPV6_CFLAGS)

dnl enable truespeech codec support
AC_ARG_ENABLE(truespeech,
      [  --enable-truespeech    Turn on TrueSpeech support (x86 only)],
      [case "${enableval}" in
        yes)  truespeech=true;;
        no)   truespeech=false;;
        *) AC_MSG_ERROR(bad value ${enableval} for --enable-truespeech) ;;
      esac],[truespeech=false])
TRUESPEECH_CFLAGS=
if test x$truespeech = xtrue ; then
	TRUESPEECH_CFLAGS=-DTRUESPEECH
fi
AC_SUBST(TRUESPEECH_CFLAGS)
AM_CONDITIONAL([BUILD_TRUESPEECH], [test x$truespeech = xtrue])




dnl support for RSVP (by Vincent Maury)
AC_ARG_ENABLE(rsvp,
[  --enable-rsvp           enable support for QoS reservations.],
AC_DEFINE(VINCENT_MAURY_RSVP,1,[Tell whether RSVP support
should be compiled.]) )

if test "x${prefix}" = "xNONE"; then
	prefix=${ac_default_prefix}
fi
if test "x${realprefix}" = "xnone"; then
	realprefix=${prefix}
fi

dnl Set PACKAGE_LOCALE_DIR in config.h.
AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${realprefix}/${DATADIRNAME}/locale",[Defines the place where locales can be found])

AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${realprefix}/${DATADIRNAME}",[Defines the place where data are found])

dnl Set PACKAGE_SOUND_DIR in config.h.
AC_DEFINE_UNQUOTED(PACKAGE_SOUND_DIR, "${realprefix}/${DATADIRNAME}/sounds/linphone",[Defines the place where linphone sounds are found])

found_sound=no
AC_CHECK_HEADERS(soundcard.h sys/soundcard.h machine/soundcard.h sys/audio.h)
	if test "${ac_cv_header_sys_soundcard_h}" = "yes" || \
      	test "${ac_cv_header_soundcard_h}" = "yes" || \
		test "${ac_cv_header_sys_audio_h}" = "yes" || \
      	test "${ac_cv_header_machine_soundcard_h}" = "yes"; then
      	found_sound=yes
	fi
	if test "$found_sound" = "no"; then
     	 AC_MSG_ERROR([Could not find a support sound driver])
   	fi

if test "$alsa" = "true"; then
	AC_CHECK_HEADERS(alsa/asoundlib.h,
		[ AC_CHECK_LIB(asound,snd_pcm_open, 
				[ALSA_LIBS="-lasound" ; AC_DEFINE(__ALSA_ENABLED__,1,[Defined when alsa support is enabled]) ])
		]
	)
fi

dnl Check for samplerate libraries
dnl Check for jack libraries (sound output plugin)
PKG_CHECK_MODULES(JACK,jack >= 0.15.0, 
[ 
	dnl we' found jack devel files
	PKG_CHECK_MODULES(SAMPLERATE, samplerate >= 0.0.13, [AC_DEFINE(__JACK_ENABLED__,1,[Jack support])] ,
						[echo "libsamplerate not found, jack support disabled."])
	AC_SUBST(SAMPLERATE_CFLAGS)
	AC_SUBST(SAMPLERATE_LIBS)
], 
[echo "No jack support."] )
AC_SUBST(JACK_CFLAGS)
AC_SUBST(JACK_LIBS) 

dnl check if we have the getifaddrs() sytem call
AC_CHECK_FUNCS(getifaddrs)

dnl check for osip2
LP_CHECK_OSIP2

dnl setup flags for embedded exosip library
LP_SETUP_EXOSIP

dnl check for installed version of speex
LP_CHECK_SPEEX

dnl check for installed ilbc codec
LP_CHECK_ILBC

AC_WORDS_BIGENDIAN

define(top_builddir2,'pwd')
dnl conditionnal build of video support: require nasm.

LP_CHECK_VIDEO



dnl check dlopen support in headers and libraries, so that we can dynamically try to control artsd via libartsc.
AC_CHECK_HEADERS(dlfcn.h)
have_dlopen=false
AC_CHECK_LIB(dl,dlopen,[LIBS="$LIBS -ldl"; have_dlopen=true])
AC_CHECK_FUNC(dlopen,[have_dlopen=true])
if test "$have_dlopen" = "true" ; then
	AC_DEFINE(HAVE_DLOPEN,1,[Defined if dlopen() is availlable])
fi

dnl build the mediastreamer always from version 0.9.0
AM_CONDITIONAL(BUILD_MEDIASTREAMER, test xtrue = xtrue)

dnl same thing for media_api
AM_CONDITIONAL(BUILD_MEDIA_API, test x$media_api = xtrue)

dnl build uglib if required
AM_CONDITIONAL(BUILD_UGLIB, test x$useglib = xfalse)

dnl build gnome if required
AM_CONDITIONAL(BUILD_GNOME, test x$gnome_ui = xtrue)
dnl build gnome applet if possible
AM_CONDITIONAL(BUILD_GNOME_APPLET, test x$build_gnome_applet = xtrue)
dnl build speex only if necessary
AM_CONDITIONAL(BUILD_SPEEX, test x$use_installed_speex = xno )
dnl special things for arm-linux cross compilation toolchain
AM_CONDITIONAL(ARMBUILD, test x$use_arm_toolchain = xyes)

dnl build video support
AM_CONDITIONAL(BUILD_VIDEO, test x$video = xtrue)

AC_SUBST(ALSA_LIBS)

AC_CONFIG_SUBDIRS( oRTP)

##################################################
# Check for gtk-doc.
##################################################
AC_ARG_WITH(html-dir, [  --with-html-dir=PATH path to installed docs ])
if test "x$with_html_dir" = "x" ; then
  HTML_DIR='${datadir}/gtk-doc/html'
else
  HTML_DIR=$with_html_dir
fi

AC_SUBST(HTML_DIR)
PKG_CHECK_MODULES(GTK_DOC,gtk-doc >= 0.4, enable_gtk_doc=yes, enable_gtk_doc=no)
AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes )

dnl check for db2html (docbook) to generate html user manual
AC_CHECK_PROG(have_db2html,db2html, yes, no)
AM_CONDITIONAL(ENABLE_MANUAL, test x$have_db2html$build_manual = xyesyes )

dnl for external use of linphone libs
LINPHONE_CFLAGS="$GLIB_CFLAGS -I${includedir} -I${includedir}/linphone -I${includedir}/ortp "
LINPHONE_LIBS="$GLIB_LIBS -L${libdir}  -llinphone"
AC_SUBST(LINPHONE_CFLAGS)
AC_SUBST(LINPHONE_LIBS)



AC_DEFINE_UNQUOTED(LINPHONE_VERSION,"$VERSION",[Linphone's version number])

AC_OUTPUT([ 
Makefile 
m4/Makefile
po/Makefile.in 
pixmaps/Makefile
ipkg/Makefile
ipkg/linphone.control
exosip/Makefile
support/Makefile
mediastreamer/Makefile
mediastreamer2/Makefile
media_api/Makefile
gsmlib/Makefile
lpc10-1.5/Makefile
coreapi/Makefile
gnome/Makefile
console/Makefile
share/Makefile
share/C/Makefile
share/fr/Makefile
share/it/Makefile
share/ja/Makefile
share/linphone.pc
developer-docs/Makefile
developer-docs/mediastreamer/Makefile
])

echo "Linphone build configuration ended."
if test x$gnome_ui = xtrue ; then
	if test x$build_gnome_applet = xtrue ; then
		echo "* Gnome applet will be compiled."
	else
		echo "* Gnome applet will not be compiled due to missing gnome-applet library."
	fi
else
  if test "$missing_gnome_libs" = "true" ; then
    echo "Libgnome and/or libgnomeui are missing. For that reason the gnome interface cannot be compiled."
  fi
  if test "$useglib" = "true" ; then
	  echo "* Compilation of gnome interface is disabled."
  else
    echo "* Compilation of gnome interface is disabled because glib support was disabled or glib-2.0 was not found."
  fi
  
fi
echo "* Console interface will be compiled."
if test "$have_db2html" = "no" ; then
	echo "* db2html not found; user documentation will not be generated."
fi

echo "Now type 'make' to compile, and then 'make install' as root to install it."
