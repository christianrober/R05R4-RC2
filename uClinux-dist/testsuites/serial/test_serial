#!/usr/bin/expect
#
#Test program to test the serial driver.
#
#Steps:
#1.  Set up the tftp server on host. Set the root folder, such as "/tftpboot".
#2.  Set up the uboot environment variables. such as serverip, ipaddress, filename, bootaddr, etc.
#3.  Build the uclinux with default configuration.
#3.1 "make menuconfig"
#3.2 "make"
#3.3 "cp linux-2.6.x/linux /tftpboot/uImage
#4.  Hit the reset button on target board and start the test script.
#4.1 "cd testsuites/serial/"
#4.2 "./test_serial /dev/ttyS0"
#

set send_slow {1 .01}

set SERIAL_PORT_BAUD_RATE   "57600"
set STRDATA "abcdefghijklmnopqrstuvwxyz0123456789"
set TITLE "Serial Test"

set argc [llength $argv]
if { $argc < 1} {
   puts "Usage:  $argv0 tty-device"
   puts "   where tty-device is something like /dev/ttyS0"
   puts ""
   exit
}
# grab the user specified parameters.
set ttydev             [lindex $argv 0]

# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed $SERIAL_PORT_BAUD_RATE\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
set nkparams [llength $kparams]

set timeout 3
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id

while 1 {
	expect {
	        "Type ?" { }
		"ermit>" { break }
		"not found" {
                   tee "ERROR: Failed to start up kermit"
                   exit
		}
		timeout {
                   tee "ERROR: Time out starting up kermit"
                   exit
		}
	}
}

for {set i 0} {$i < $nkparams} {incr i} {
    send -s [lindex $kparams $i]

    while 1 {
	  expect {
		 "ermit>" { break }

		 "\\?\[A-Z]" {
                    tee "ERROR: Failed to set up kermit parameters"
                    exit
		 }

		 timeout {
                    tee "ERROR: Time out setting up kermit parameters"
                    exit
		 }
	  }
    }
}

send -s "connect\r"
while 1 {
	expect {
		"ype the escape character*" {
		     break  }
		timeout {
		     puts "\nERROR: Can't connect to serial port\n"
		     exit }
	}
}
#
#  Ok, Kermit is running and connected to the board.
#

set timeout 1
set flag 0
for {set i 0} {$i<4} {incr i} {
   send -s "\r"
   expect {
      ">" {
         set flag 1
      }
   }
}
if {$flag==0} {
   puts "fail to communicate with uboot.\n"
   exit
}

set timeout 2
set flag 0
send -s "tftpboot\r"
while 1 {
   expect {
      "TFTP" {
         set flag 1
         set timeout 30
      }
      ">" {
         break
      }
   }
}
if {$flag==0} {
   puts "fail to communicate with uboot.\n"
   exit
}

set timeout 1
set flag 0
send -s "bootelf\r"
while 1 {
   expect {
      "Loading .text" {
         set flag 1
         set timeout 3
      }
      "Linux version" {
         break
      }
   }
}
if {$flag==0} {
   puts "fail to communicate with uboot.\n"
   exit
}

puts "*********************************\r"
puts "Start $TITLE\r"
puts "*********************************\r"

set case_num 0

incr case_num
set timeout 30
send -s "$STRDATA\r"
while 1 {
   expect {
	"> " {
		puts "\rCase $case_num ...PASS\r"
		break
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "\3"
   expect {
	"> " {
		puts "\rCase $case_num ...PASS\r"
		break
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "ls\r"
   expect {
	"> " {
		puts "\rCase $case_num ...PASS\r"
		break
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "dmesg\r"
   send -s "dmesg\r"
   send -s "dmesg\r"
   send -s "cat proc/slabinfo\r"
   expect {
	"slabinfo - version" {
		break
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

while 1 {
   expect {
	"> " {
		puts "\rCase $case_num ...PASS\r"
		break
	}
         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "cat proc/kallsyms\r"
   expect {
	"start" {
		break
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

while 1 {
   sleep 1
   send -s "\3"
   expect {
	"> " {
		puts "\rCase $case_num ...PASS\r"
		break
	}
         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}


incr case_num
set timeout 30
for {set i 0} {$i<100} {incr i} {
   send "$STRDATA\r"
}
send -s "====================================\r"

while 1 {
   expect {
	"=========: not found" {
		puts "\rCase $case_num ...PASS\r"
		break
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "vi\r"
   expect {
	"line 1 of 1" {
		break
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

while 1 {
   set timeout 30
   send -s "i"
   send -s "adskf\r"
   send -s "werigji\r"
   send -s "werigji\r"
   send -s "werigji\r"
   send -s "werigji\r"
   send -s "werigji\r"
   send -s "werigji\r"
   for {set i 0} {$i<100} {incr i} {
      send -s "x"
      expect {
	"x" {
	}
         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
      }
   }
   send -s "a\r"
   send -s "b\r"
   send -s "c\r"
   send -s "d\r"
   send -s "e\r"
   send -s "f\r"
   send -s "\r"
   send -s "$STRDATA"
   send -s "$STRDATA"
   send -s "$STRDATA"
   send -s "$STRDATA\r"
   for {set i 0} {$i<100} {incr i} {
      send "$STRDATA\r"
   }
   send -s "===================================#"
   expect {
	"#" {
		sleep 1
		send -s "\033"
		send -s ":q!\r"
		puts "\rCase $case_num ...PASS\r"
		break
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

puts "                                                                        \r"
puts "\r$TITLE ............\[PASS\]\r"
