#!/usr/bin/expect
log_file ide_test_log
send_user "Starting ide_test.exp!\n"

set uclinux_path ~/checkouts/kernel/uClinux-dist
set TITLE "IDE Test"
set dxe_filename linux
set ttydev /dev/ttyS0
set send_slow {1 0.1}
set TEST_PASS pass
set TEST_FAIL fail
set password "123456"


puts "STEP 1: make config"

cd $uclinux_path
set timeout 300
spawn make config

while 1 {
   expect {
     -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
             sleep .5
             send "BF537-STAMP\r"
      }

      "\\\(*) \\\[*]" {
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     puts "End of configuration"
	     break
      }
      timeout {
	     puts "\n\nFATAL ERROR: config prompt timeout in make config"
             
      }
   }
}

cd $uclinux_path
set timeout 300
spawn make config

while 1 {
   expect {
   
   	   -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
	     sleep .5   
	     send "BF537-STAMP\r"
      } 
   
   	   -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[././.]" {
          
             sleep .5
             send "y\r"
      }

           -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[././.]" {
             sleep .5
             send "y\r"
      }

 	  -re "ATA.ATAPI.MFM.RLL support.*IDE.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
      
         -re "Enhanced IDE.MFM.RLL disk.cdrom.tape.floppy support.*BLK_DEV_IDE.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
      
         -re "Include IDE.ATA-2 DISK support.*BLK_DEV_IDEDISK.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
        
          -re "IDE register base address.*BFIN_IDE_BASE.*\\\[.*]" {
             sleep .5
             send "0x2030C020\r"
      }
	  -re "IDE register alternate address.*BFIN_IDE_ALT.*\\\[.*]" {
             sleep .5
             send "0x2030C01C\r"
      }
         -re "IDE IRQ no.*BFIN_IDE_IRQ.*\\\[.*]" {
             sleep .5
             send "34\r"
      }
      
         -re "IDE IRQ PFx no.*BFIN_IDE_IRQ_PFX.*\\\[.*]" {
             sleep .5
             send "54\r"
      }
       
        -re "IDE Interface Address Mapping.*BFIN_IDE_ADDRESS_MAPPING_MODE1.*choice.*\\\[.*]" {
             sleep .5
             send "2\r"
      }
        -re "Blackfin A.* used as CF A0.*BFIN_IDE_ADDRESS_AX.*\\\[.*]" {
             sleep .5
             send "13\r"
      }
      
          -re "Re-program Clocks while Kernel boots.*BFIN_KERNEL_CLOCK.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
    
          -re "VCO Multiplier.*VCO_MULT.*\\\[.*]" {
             sleep .5
             send "20\r"
      }
      
          -re "Core Clock Divider.*CCLK_DIV.*\\\[.*]" {
             sleep .5
             send "1\r"
      }
      
          -re "System Clock Divider.*SCLK_DIV.*\\\[.*]" {
             sleep .5
             send "8\r"
      }
 
	-re "Bank 2.*\\\(BANK_2\\\).*\\\[.*]" {
             sleep .5
             send "0xFFC3\r"
      }
      
          -re "Bank 3.*\\\(BANK_3\\\).*\\\[.*]" {
             sleep .5
             send "0xFFC3\r"
      }

       -re "MSDOS fs support.*MSDOS_FS.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
  
      -re "VFAT.*Windows-95.*fs support.*VFAT_FS.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
   
      -re "Default NLS Option.*NLS_DEFAULT.*\\\[.*]" {
             sleep .5
             send "\r"
      }
         
	-re "Codepage 437.*United States.*Canada.*NLS_CODEPAGE_437.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
      
	-re "Codepage 850.*Europe.*NLS_CODEPAGE_850.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
     
	-re "fdisk.*CONFIG_USER_FDISK_FDISK.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
      
       -re "mke2fs.*CONFIG_USER_E2FSPROGS_MISC_MKE2FS.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
     
      
       -re "hdparm.*CONFIG_USER_BUSYBOX_HDPARM.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
      
       -re "hdparm. get identity.*CONFIG_USER_BUSYBOX_HDPARM_GET_IDENTITY.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
      
      -re "hdparm. scan hwif.*CONFIG_USER_BUSYBOX_HDPARM_HDIO_SCAN_HWIF.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
       -re "hdparm. unregister hwif.*CONFIG_USER_BUSYBOX_HDPARM_HDIO_UNREGISTER_HWIF.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
      
       -re "hdparm. drive reset.*CONFIG_USER_BUSYBOX_HDPARM_HDIO_DRIVE_RESET.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
      
      -re "hdparm. tristate hwif.*CONFIG_USER_BUSYBOX_HDPARM_HDIO_TRISTATE_HWIF.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }
      
      -re "hdparm. get.set dma.*CONFIG_USER_BUSYBOX_HDPARM_HDIO_GETSET_DMA.*\\\[.*]" {
             sleep .5
             send "Y\r"
      }

       "\\\(*) \\\[*]" {
             sleep .3
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     puts "End of configuration"
	     break
      }
      timeout {
	     puts "\n\nFATAL ERROR: config prompt timeout in make config"
             break
      }
   }
}


puts "STEP 2: make"

cd $uclinux_path
spawn make
set timeout 1200
set bfin_make_status failure
while 1 {
      expect {
	     "Entering directory" { }
	     "Leaving directory" { set bfin_make_status success }
	     "Error" {set bfin_make_status failure }
	     "/bin/sh" { }
	     eof { break }
      }
}

if { $bfin_make_status == "failure" } {
      puts "ERROR: Error somewhere during make"
      break
}    


puts "STEP 3: copy linux"
  
set timeout 8
cd $uclinux_path
exec cp images/linux  /tftpboot


puts "STEP 4: start kermit"

#step "Start up kermit on port $ttydev"
# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed 57600\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
lappend kparams "set escape 255\r"
set nkparams [llength $kparams]

set timeout 5
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id

while 1 {
	expect {
	        "Type ?" { }
		"ermit>" { break }
		"not found" {
                   report "ERROR: Failed to start up kermit"
                   all_done
		}
		timeout {
                   report "ERROR: Time out starting up kermit"
                   all_done
		}
	}
}

for {set i 0} {$i < $nkparams} {incr i} {
   send [lindex $kparams $i]

   while 1 {
      expect {
         "ermit>" { break }

         "\\?\[A-Z]" {
            puts "ERROR: Failed to set up kermit parameters"
          #  all_done
         }

         timeout {
            puts "ERROR: Time out setting up kermit parameters"
           # all_done
         }
      }
   }
}

send "connect\r"
while 1 {
   expect {
      "ype the escape character*" {
         break
      }

      timeout {
         puts "\nERROR: Can't connect to serial port\n"
         exit
      }
   }
}

puts "STEP 5: reboot"

send "\r"
send "reboot\r"

set timeout 20
    while 1 {
        expect {
            "Hit any key" {
            #  send "\3"
             break
            }

            timeout {

                send_user "ERROR: u-boot failed to reset\n"               
                break
            }
        }
    }
    

 set timeout 180
   while 1 {
      expect {

         -re "Kernel panic" {
            report "kernel panic detected... trying to recover from it"        
            break
         }

         -re "Sash command shell.*/> " {
            puts "successful boot attempt"        
            break
         }
	 
	  "root:~> " {
            puts "successful boot attempt"         
            break
         }

         -re "Linux version (.*) " {
            set linux_version $expect_out(1,string)
         }

         # Look for gcc version N.N[.N[.N]]
         -re "gcc version (\[0-9](\.\[0-9]+)+)" {
            set gcc_version [lindex $expect_out(0,string) 2]
         }

         # Look for text followed by 1 or more spaces or tabs
         # followed by = followed by 1 or more spaces or tabs
         # followed by (0xNNNNNN-0xNNNNNN)
         -re "text\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_text $expect_out(1,string)
         }

         -re "data\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_data $expect_out(1,string)
         }

         -re "bss\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_bss $expect_out(1,string)
         }
         -re "rootfs\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_rootfs $expect_out(1,string)
         }

         # Note that here we're looking for zero or 1 space. Doh!
         -re "stack\[\x20\t]?=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_stack $expect_out(1,string)
         }

       
         timeout {
            puts "failed boot attempt"	 
            break
         }
      }
   }

sleep 5
puts "*********************************\r"
puts "Start $TITLE\r"
puts "*********************************\r"
set timeout 120
set case_num 0

incr case_num
send "dmesg\r" 
while 1 {
   expect {
      "hda: hda1" {
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

while 1 {

incr case_num
send "fdisk /dev/hda\r" 
expect {
     -re "Command .*:" {		
      }
      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }

send "p\r" 
   expect {
     -re "Command .*:" {
      }
      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
     
send "d\r" 
   expect {
     -re "Partition number.*:" {
      }
      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }

send "1\r" 
   expect {
     -re "Command .*:" {
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }

send "n\r" 
   expect {
     -re "Command action.*" {
      }
      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
 
send "p\r" 
   expect {
     -re "Partition number.*" {
      }
      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }    

send "1\r" 
   expect {
     -re "First cylinder.*" {
      }
      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     } 
 
send "\r" 
   expect {
     -re "Last cylinder.*" {
      }
      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     } 
     
send "\r" 
   expect {
     -re "Command .*:" {
      }
      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
     
send "w\r" 
   expect {
     -re "Syncing disks." {
		puts "\rCase $case_num ...PASS\r"		
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send "mke2fs /dev/hda1\r" 
while 1 {
   expect {
     -re "done.*done" {
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send "mount /dev/hda1 /mnt\r" 
while 1 {
   expect {
      ">" {
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}


incr case_num
send "cp /bin/pwd /mnt\r" 
while 1 {
   expect {
      ">" {
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send "ls -al /mnt\r" 
while 1 {
   expect {
      ">" {
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send "time cat /mnt/pwd > /dev/null\r" 
while 1 {
   expect {
     -re "real.*user.*sys" {
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send "hdparm -i /dev/hda\r" 
while 1 {
   expect {
     -re "Model=.*Config=.*AdvancedPM.*" {
                sleep 1
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send "cat /proc/filesystems\r" 
while 1 {
   expect {
     -re "msdos.*vfat.*" {
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send "df\r" 
while 1 {
   expect {
      "/dev/hda1" {
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send "while \[ 1 \]; md5sum /mnt/pwd ; done\r" 
while 1 {
   expect {
      -re "\[0-9a-z]+  /mnt/pwd" {
                sleep 3
                send "\3"
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}

incr case_num
send "umount /mnt\r" 
while 1 {
   expect {
      ">" {
		puts "\rCase $case_num ...PASS\r"
		break
      }

      timeout {
                puts "\rCase $case_num ...FAIL\r"
                puts "$TITLE ............\[FAIL\]\r"
                exit      
         }
     }
}


puts "                                                                        \r"
puts "\r$TITLE ............\[PASS\]\r"
                                     
log_file
 
send_user "\nEnding ide_test.exp!\n"


