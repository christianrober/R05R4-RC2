#!/usr/bin/expect
#
#Test program to test the serial driver.
#
#Steps:
#1.  Set up the tftp server on host. Set the root folder, such as "/tftpboot".
#2.  Set up the uboot environment variables. such as serverip, ipaddress, filename, bootaddr, etc.
#3.  Build the uclinux with audio driver support and audio applications.
#3.1 "make menuconfig"
#3.2 Select option "Customize Kernel Settings" and "Customize User/Vendor Settings"
#3.3 In menu "Sound", select options "Sound card support"
#3.4 In menu "Advanced Linux Sound Architecture", select options "Advanced Linux Sound Architecture", 
#    "Sequencer support", "Sequencer support", "OSS Mixer API", "OSS PCM (digital audio) API", "OSS Sequencer API".
#3.5 In menu "Miscellaneous Applications", select "vplay" and "vrec".
#3.6 "make"
#3.7 "cp linux-2.6.x/linux /tftpboot/uImage
#4   Connect the earphone to the audio output on the target board, conect audio line from the host audio output to the audio input on the target board.
#5.  Hit the reset button on target board and start the test script.
#5.1 "cd testsuites/audio/"
#5.2 "./test_audio /dev/ttyS0"
#

set send_slow {1 .01}

set SERIAL_PORT_BAUD_RATE   "57600"
set STRDATA "abcdefghijklmnopqrstuvwxyz0123456789"
set TITLE "Audio Test"

set argc [llength $argv]
if { $argc < 1} {
   puts "Usage:  $argv0 tty-device"
   puts "   where tty-device is something like /dev/ttyS0"
   puts ""
   exit
}
# grab the user specified parameters.
set ttydev             [lindex $argv 0]

# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed $SERIAL_PORT_BAUD_RATE\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
set nkparams [llength $kparams]

set timeout 3
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id

while 1 {
	expect {
	        "Type ?" { }
		"ermit>" { break }
		"not found" {
                   tee "ERROR: Failed to start up kermit"
                   exit
		}
		timeout {
                   tee "ERROR: Time out starting up kermit"
                   exit
		}
	}
}

for {set i 0} {$i < $nkparams} {incr i} {
    send -s [lindex $kparams $i]

    while 1 {
	  expect {
		 "ermit>" { break }

		 "\\?\[A-Z]" {
                    tee "ERROR: Failed to set up kermit parameters"
                    exit
		 }

		 timeout {
                    tee "ERROR: Time out setting up kermit parameters"
                    exit
		 }
	  }
    }
}

send -s "connect\r"
while 1 {
	expect {
		"ype the escape character*" {
		     break  }
		timeout {
		     puts "\nERROR: Can't connect to serial port\n"
		     exit }
	}
}
#
#  Ok, Kermit is running and connected to the board.
#

set timeout 1
set flag 0
for {set i 0} {$i<4} {incr i} {
   send -s "\r"
   expect {
      ">" {
         set flag 1
      }
   }
}
if {$flag==0} {
   puts "fail to communicate with uboot.\n"
   exit
}

set timeout 2
set flag 0
send -s "tftpboot\r"
while 1 {
   expect {
      "TFTP" {
         set flag 1
         set timeout 30
      }
      ">" {
         break
      }
   }
}
if {$flag==0} {
   puts "fail to communicate with uboot.\n"
   exit
}

set timeout 1
set flag 0
send -s "bootelf\r"
while 1 {
   expect {
      "Loading .text" {
         set flag 1
         set timeout 3
      }
      "Linux version" {
         break
      }
   }
}
if {$flag==0} {
   puts "fail to communicate with uboot.\n"
   exit
}

set timeout 30
while 1 {
   expect {
	"> " {
		break
	}

         timeout {
		puts "fail to communicate with kernel.\n"
		exit
         }
   }
}

puts "*********************************\r"
puts "Start $TITLE\r"
puts "*********************************\r"

spawn plaympeg -l audiotest.mp3
set plaympeg_id $spawn_id

set spawn_id $kermit_spawn_id 

set case_num 0

puts "Please listen to the earphone or amplifier.\r\r"

sleep 3

while 1 {
   set timeout 10
   incr case_num
   send -s "vrec -w -S -b 16 -s 44100 -t 4 aaa\r"
   expect {
	"> " {
	}

         timeout {
	 	puts "$TITLE ............FAIL\r"
		exit
         }
   }
   send -s "vplay aaa\r"
   expect {
	"> " {
		puts "\rCase $case_num ...DONE\r"
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   incr case_num
   send -s "vrec -w -S -b 16 -s 22000 -t 6 aaa\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   send -s "vplay aaa\r"
   expect {
	"> " {
		puts "\rCase $case_num ...DONE\r"
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   incr case_num
   send -s "vrec -w -S -b 16 -s 11000 -t 6 aaa\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   send -s "vplay aaa\r"
   expect {
	"> " {
		puts "\rCase $case_num ...DONE\r"
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   incr case_num
   send -s "vrec -w -S -b 16 -s 8000 -t 6 aaa\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   send -s "vplay aaa\r"
   expect {
	"> " {
		puts "\rCase $case_num ...DONE\r"
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   incr case_num
   send -s "vrec -w -S -b 8 -s 44100 -t 6 aaa\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   send -s "vplay aaa\r"
   expect {
	"> " {
		puts "\rCase $case_num ...DONE\r"
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   incr case_num
   send -s "vrec -w -S -b 8 -s 8000 -t 6 aaa\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   send -s "vplay aaa\r"
   expect {
	"> " {
		puts "\rCase $case_num ...DONE\r"
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   incr case_num
   send -s "vrec -w -b 16 -s 44100 -t 6 aaa\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   send -s "vplay aaa\r"
   expect {
	"> " {
		puts "\rCase $case_num ...DONE\r"
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   incr case_num
   send -s "vrec -w -b 16 -s 11000 -t 6 aaa\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   send -s "vplay aaa\r"
   expect {
	"> " {
		puts "\rCase $case_num ...DONE\r"
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   incr case_num
   send -s "vrec -w -b 8 -s 22000 -t 6 aaa\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   send -s "vplay aaa\r"
   expect {
	"> " {
		puts "\rCase $case_num ...DONE\r"
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }

   puts "Finally, test play and record audio concurrently...\r"
   sleep 1
   set timeout 10

   send -s "\r"
   expect {
	"> " {
	}
   }

   incr case_num
   send -s "vrec -w -S -b 16 -s 8000 -t 6|vplay\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }

   sleep 1
   incr case_num
   send -s "vrec -w -S -b 16 -s 48000 -t 6|vplay\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   
   sleep 1
   incr case_num
   send -s "vrec -w -b 16 -s 8000 -t 6|vplay\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   
   sleep 1
   incr case_num
   send -s "vrec -w -b 16 -s 48000 -t 6|vplay\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   
   sleep 1
   incr case_num
   send -s "vrec -w -b 8 -s 8000 -t 6|vplay\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }

   sleep 1
   incr case_num
   send -s "vrec -w -b 8 -s 48000 -t 6|vplay\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }

   sleep 1
   incr case_num
   send -s "vrec -w -b 16 -s 11000 -t 8 aaa\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   send -s "vplay aaa &\r"
   expect {
	"Playing WAVE" {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }

   send -s "\r"
   expect {
	"> " {
	}

         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
   send -s "vrec -w -b 16 -s 11000 -t 4 bbb\r"
   expect {
	"> " {
	}
	
         timeout {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
         }
   }

   sleep 5
   expect {
	"Input/output error" {
		puts "\rCase $case_num ...FAIL\r"
		puts "$TITLE ............\[FAIL\]\r"
		exit
	}
	
	timeout {
		puts "\rCase $case_num ...DONE\r"
		break;
	}
   }
}

set spawn_id $plaympeg_id
send "\3"
sleep 1

puts "\r$TITLE ............DONE\r"
